# baseURI: http://qudt-public-repo/submissions/newunits_spin
# imports: http://purl.org/dc/elements/1.1/
# imports: http://purl.org/dc/terms/
# imports: http://qudt-public-repo/submissions/newUnits3
# imports: http://qudt.org/2.0/schema/qudt/science
# imports: http://qudt.org/2.1/schema/qudt
# imports: http://qudt.org/2.1/vocab/quantitykind
# imports: http://spinrdf.org/spin
# imports: http://spinrdf.org/spinx
# imports: http://topbraid.org/spin/spinmapl
# imports: http://topbraid.org/spin/spinrdfs
# imports: http://topbraid.org/tables
# imports: http://www.linkedmodel.org/schema/vaem
# prefix: newunits_spin

@prefix afn: <http://jena.hpl.hp.com/ARQ/function#> .
@prefix arg: <http://spinrdf.org/arg#> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix dct: <http://purl.org/dc/terms/> .
@prefix fn: <http://www.w3.org/2005/xpath-functions#> .
@prefix newUnits3: <http://qudt-public-repo/submissions/newUnits3/> .
@prefix newunits_spin: <http://qudt-public-repo/submissions/newunits_spin#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix qkdv: <http://qudt.org/vocab/dimensionvector/> .
@prefix quantitykind: <http://qudt.org/vocab/quantitykind/> .
@prefix qudt: <http://qudt.org/schema/qudt/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix smf: <http://topbraid.org/sparqlmotionfunctions#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix spif: <http://spinrdf.org/spif#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spinx: <http://spinrdf.org/spinx#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix tables: <http://topbraid.org/tables#> .
@prefix unit: <http://qudt.org/vocab/unit/> .
@prefix vaem: <http://www.linkedmodel.org/schema/vaem#> .
@prefix voag: <http://voag.linkedmodel.org/schema/voag#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

<http://qudt-public-repo/submissions/newunits_spin>
  a owl:Ontology ;
  owl:imports dc: ;
  owl:imports dct: ;
  owl:imports <http://qudt-public-repo/submissions/newUnits3> ;
  owl:imports <http://qudt.org/2.0/schema/qudt/science> ;
  owl:imports <http://qudt.org/2.1/schema/qudt> ;
  owl:imports <http://qudt.org/2.1/vocab/quantitykind> ;
  owl:imports <http://spinrdf.org/spin> ;
  owl:imports <http://spinrdf.org/spinx> ;
  owl:imports <http://topbraid.org/spin/spinmapl> ;
  owl:imports <http://topbraid.org/spin/spinrdfs> ;
  owl:imports <http://topbraid.org/tables> ;
  owl:imports <http://www.linkedmodel.org/schema/vaem> ;
  owl:versionInfo "Created with TopBraid Composer" ;
.
newunits_spin:InsertNewUnits
  a spin:UpdateTemplate ;
  spin:body [
      a sp:Modify ;
      sp:deletePattern (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object qudt:Unit ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "newUnitQname" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode <http://qudt-public-repo/submissions/newUnitsCreated> ;
          ]
        ) ;
      sp:insertPattern (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object qudt:Unit ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "newUnitQname" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "newUnitLabel" ;
                    ] ;
                  sp:predicate rdfs:label ;
                  sp:subject [
                      sp:varName "newUnitQname" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "IEC_CODE" ;
                    ] ;
                  sp:predicate qudt:iec61360Code ;
                  sp:subject [
                      sp:varName "newUnitQname" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "UNECE_CODE" ;
                    ] ;
                  sp:predicate qudt:uneceCommonCode ;
                  sp:subject [
                      sp:varName "newUnitQname" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "IEC_DEFN" ;
                    ] ;
                  sp:predicate qudt:description ;
                  sp:subject [
                      sp:varName "newUnitQname" ;
                    ] ;
                ]
                [
                  sp:object "CM PLACEHOLDER" ;
                  sp:predicate qudt:conversionMultiplier ;
                  sp:subject [
                      sp:varName "newUnitQname" ;
                    ] ;
                ]
                [
                  sp:object "CO PLACEHOLDER" ;
                  sp:predicate qudt:conversionOffset ;
                  sp:subject [
                      sp:varName "newUnitQname" ;
                    ] ;
                ]
                [
                  sp:object "QK PLACEHOLDER" ;
                  sp:predicate qudt:hasQuantityKind ;
                  sp:subject [
                      sp:varName "newUnitQname" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "IEC_DIMS" ;
                    ] ;
                  sp:predicate qudt:baseUnitDimensions ;
                  sp:subject [
                      sp:varName "newUnitQname" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode <http://qudt-public-repo/submissions/newUnitsCreated> ;
          ]
        ) ;
      sp:where (
          [
            sp:object spin:_arg1 ;
            sp:predicate newunits_spin:unitNotInQUDT ;
            sp:subject [
                sp:varName "unit" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "IEC_CODE" ;
              ] ;
            sp:predicate newUnits3:code ;
            sp:subject [
                sp:varName "unit" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "UNECE" ;
              ] ;
            sp:predicate <http://qudt-public-repo/submissions/newUnits3/remark.EN> ;
            sp:subject [
                sp:varName "unit" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "IEC_DEFN" ;
              ] ;
            sp:predicate <http://qudt-public-repo/submissions/newUnits3/definition.EN> ;
            sp:subject [
                sp:varName "unit" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "IEC_LABEL" ;
              ] ;
            sp:predicate <http://qudt-public-repo/submissions/newUnits3/preferredName.EN> ;
            sp:subject [
                sp:varName "unit" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "IEC_UNIT" ;
              ] ;
            sp:predicate newUnits3:primaryUnit ;
            sp:subject [
                sp:varName "unit" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "iecLabel" ;
              ] ;
            sp:predicate newUnits3:unitText ;
            sp:subject [
                sp:varName "unit" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a fn:substring ;
                sp:arg1 [
                    sp:varName "UNECE" ;
                  ] ;
                sp:arg2 14 ;
              ] ;
            sp:variable [
                sp:varName "UNECE_CODE" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a fn:concat ;
                sp:arg1 "unit:" ;
                sp:arg2 [
                    a spif:replaceAll ;
                    sp:arg1 [
                        sp:varName "iecLabel" ;
                      ] ;
                    sp:arg2 " " ;
                    sp:arg3 "-" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "newUnitName" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:buildURI ;
                sp:arg1 [
                    sp:varName "newUnitName" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "newUnitQname" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                sp:varName "iecLabel" ;
              ] ;
            sp:variable [
                sp:varName "newUnitLabel" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:comment """This function inserts new units into the graph that aren't already (hopefully) in the QUDT unit vocabulary. It tries to create legal qnames for the units (a work in progress) and assigns the IEC 61360 and UNECE codes into it.

Call with:

SELECT *
WHERE {
   ?arg1 a newUnits3:Export .
   BIND (newunits_spin:InsertNewUnits(?arg1) AS ?result) .
}""" ;
  rdfs:label "Insert new units" ;
  rdfs:subClassOf spin:UpdateTemplates ;
  skos:prefLabel "Insert new units" ;
.
newunits_spin:UpdateTemplates_1
  a spin:UpdateTemplate ;
  spin:body [
      a sp:Modify ;
      sp:deletePattern (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object qudt:Unit ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "newUnitQname" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode <http://qudt-public-repo/submissions/newUnitsCreated> ;
          ]
        ) ;
      sp:insertPattern (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object qudt:Unit ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "newUnitQname" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "newUnitLabel" ;
                    ] ;
                  sp:predicate rdfs:label ;
                  sp:subject [
                      sp:varName "newUnitQname" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "IEC_CODE" ;
                    ] ;
                  sp:predicate qudt:iec61360Code ;
                  sp:subject [
                      sp:varName "newUnitQname" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "UNECE_CODE" ;
                    ] ;
                  sp:predicate qudt:uneceCommonCode ;
                  sp:subject [
                      sp:varName "newUnitQname" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "IEC_DEFN" ;
                    ] ;
                  sp:predicate qudt:description ;
                  sp:subject [
                      sp:varName "newUnitQname" ;
                    ] ;
                ]
                [
                  sp:object "CM PLACEHOLDER" ;
                  sp:predicate qudt:conversionMultiplier ;
                  sp:subject [
                      sp:varName "newUnitQname" ;
                    ] ;
                ]
                [
                  sp:object "CO PLACEHOLDER" ;
                  sp:predicate qudt:conversionOffset ;
                  sp:subject [
                      sp:varName "newUnitQname" ;
                    ] ;
                ]
                [
                  sp:object "QK PLACEHOLDER" ;
                  sp:predicate qudt:hasQuantityKind ;
                  sp:subject [
                      sp:varName "newUnitQname" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "IEC_DIMS" ;
                    ] ;
                  sp:predicate qudt:baseUnitDimensions ;
                  sp:subject [
                      sp:varName "newUnitQname" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode <http://qudt-public-repo/submissions/newUnitsCreated> ;
          ]
        ) ;
      sp:where (
          [
            sp:object spin:_arg1 ;
            sp:predicate newunits_spin:unitNotInQUDT ;
            sp:subject [
                sp:varName "unit" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "IEC_CODE" ;
              ] ;
            sp:predicate newUnits3:code ;
            sp:subject [
                sp:varName "unit" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "UNECE" ;
              ] ;
            sp:predicate <http://qudt-public-repo/submissions/newUnits3/remark.EN> ;
            sp:subject [
                sp:varName "unit" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "IEC_DEFN" ;
              ] ;
            sp:predicate <http://qudt-public-repo/submissions/newUnits3/definition.EN> ;
            sp:subject [
                sp:varName "unit" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "IEC_LABEL" ;
              ] ;
            sp:predicate <http://qudt-public-repo/submissions/newUnits3/preferredName.EN> ;
            sp:subject [
                sp:varName "unit" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "IEC_UNIT" ;
              ] ;
            sp:predicate newUnits3:primaryUnit ;
            sp:subject [
                sp:varName "unit" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "iecLabel" ;
              ] ;
            sp:predicate newUnits3:unitText ;
            sp:subject [
                sp:varName "unit" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a fn:substring ;
                sp:arg1 [
                    sp:varName "UNECE" ;
                  ] ;
                sp:arg2 14 ;
              ] ;
            sp:variable [
                sp:varName "UNECE_CODE" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a fn:concat ;
                sp:arg1 "unit:" ;
                sp:arg2 [
                    a spif:replaceAll ;
                    sp:arg1 [
                        sp:varName "iecLabel" ;
                      ] ;
                    sp:arg2 " " ;
                    sp:arg3 "-" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "newUnitName" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:buildURI ;
                sp:arg1 [
                    sp:varName "newUnitName" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "newUnitQname" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                sp:varName "iecLabel" ;
              ] ;
            sp:variable [
                sp:varName "newUnitLabel" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:labelTemplate "The unit ?newUnitQname is added with the label: ?newUnitLabel" ;
  rdfs:subClassOf spin:UpdateTemplates ;
.
newunits_spin:convertDimensions
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "convertedUnitDIMS" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "IEC_UNIT" ;
              ] ;
            sp:predicate newUnits3:primaryUnit ;
            sp:subject spin:_arg1 ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a fn:upper-case ;
                sp:arg1 [
                    sp:varName "IEC_UNIT" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "IEC_UC_UNIT" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?0" ;
              ] ;
            sp:predicate spif:split ;
            sp:subject [
                sp:varName "elem" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "IEC_UC_UNIT" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?1" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object " " ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spif:replaceAll ;
                sp:arg1 [
                    a spif:replaceAll ;
                    sp:arg1 [
                        a spif:replaceAll ;
                        sp:arg1 [
                            a spif:replaceAll ;
                            sp:arg1 [
                                a spif:replaceAll ;
                                sp:arg1 [
                                    a spif:replaceAll ;
                                    sp:arg1 [
                                        a spif:replaceAll ;
                                        sp:arg1 [
                                            a spif:replaceAll ;
                                            sp:arg1 [
                                                a spif:replaceAll ;
                                                sp:arg1 [
                                                    sp:varName "IEC_UC_UNIT" ;
                                                  ] ;
                                                sp:arg2 "RAD" ;
                                                sp:arg3 "D" ;
                                              ] ;
                                            sp:arg2 "A" ;
                                            sp:arg3 "E" ;
                                          ] ;
                                        sp:arg2 "MOL" ;
                                        sp:arg3 "A" ;
                                      ] ;
                                    sp:arg2 "M" ;
                                    sp:arg3 "L" ;
                                  ] ;
                                sp:arg2 "CD" ;
                                sp:arg3 "I" ;
                              ] ;
                            sp:arg2 "KG" ;
                            sp:arg3 "M" ;
                          ] ;
                        sp:arg2 "K" ;
                        sp:arg3 "H" ;
                      ] ;
                    sp:arg2 "SR" ;
                    sp:arg3 "D" ;
                  ] ;
                sp:arg2 "S" ;
                sp:arg3 "T" ;
              ] ;
            sp:variable [
                sp:varName "convertedUnitDIMS" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
    ] ;
  rdfs:comment """Convert something like m2 s-1 into L T-1

1. Convert LC to UC
2. Match and replace types (add one at a time)
    a. Aggregate like terms (e.g., K and K-1)
    b. Sum exponents (e.g., 1 -1 = 0) -> K0 D1
    c. S -> T, KG -> M, M -> L, A -> E, CD -> I, SR -> L, MOL -> A, K -> H, RAD -> L,
3. Remove spaces (easy)

CALLED BY: newunits_spin:getDimensionComponents

REAL TEST:

SELECT ?result
WHERE {
  ?arg1 a newUnits3:Export .
  BIND (newunits_spin:convertDimensions(?arg1) AS ?result) .
}

FULL SPARQL TEST:

SELECT ?IEC_UNIT ?result
WHERE {
    ?arg1 a newUnits3:Export .
    ?arg1 newUnits3:primaryUnit ?IEC_UNIT .
    BIND (fn:upper-case(?IEC_UNIT) AS ?IEC_UC_UNIT) .
    ?elem spif:split (?IEC_UC_UNIT \" \") .
    BIND (spif:replaceAll(
                   spif:replaceAll(
                       spif:replaceAll(
                           spif:replaceAll(
                               spif:replaceAll(
                                   spif:replaceAll(
                                       spif:replaceAll(
                                           spif:replaceAll(
                                               spif:replaceAll(?IEC_UC_UNIT, \"RAD\", \"D\"),
                                               \"A\", \"E\"),
                                           \"MOL\", \"A\"),
                                       \"M\", \"L\"),
                                   \"CD\", \"I\"),
                               \"KG\", \"M\"),
                           \"K\", \"H\"),
                       \"SR\", \"D\"),
                   \"S\", \"T\") AS ?result) .
}

Send the result into a function that will break the result up and rewrite the template based on the items in it""" ;
  rdfs:subClassOf spin:Functions ;
.
newunits_spin:convertIECLabel1
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "newName" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a spif:replaceAll ;
                sp:arg1 [
                    a spif:replaceAll ;
                    sp:arg1 [
                        a spif:replaceAll ;
                        sp:arg1 [
                            a spif:replaceAll ;
                            sp:arg1 [
                                a spif:replaceAll ;
                                sp:arg1 [
                                    a spif:replaceAll ;
                                    sp:arg1 [
                                        a spif:replaceAll ;
                                        sp:arg1 [
                                            a spif:replaceAll ;
                                            sp:arg1 [
                                                a spif:replaceAll ;
                                                sp:arg1 [
                                                    a spif:replaceAll ;
                                                    sp:arg1 [
                                                        a spif:replaceAll ;
                                                        sp:arg1 [
                                                            a spif:replaceAll ;
                                                            sp:arg1 [
                                                                a spif:replaceAll ;
                                                                sp:arg1 [
                                                                    a spif:replaceAll ;
                                                                    sp:arg1 [
                                                                        a spif:replaceAll ;
                                                                        sp:arg1 [
                                                                            a spif:replaceAll ;
                                                                            sp:arg1 [
                                                                                a spif:replaceAll ;
                                                                                sp:arg1 [
                                                                                    a spif:replaceAll ;
                                                                                    sp:arg1 [
                                                                                        a spif:replaceAll ;
                                                                                        sp:arg1 [
                                                                                            a spif:replaceAll ;
                                                                                            sp:arg1 [
                                                                                                a spif:replaceAll ;
                                                                                                sp:arg1 [
                                                                                                    a spif:replaceAll ;
                                                                                                    sp:arg1 [
                                                                                                        a spif:replaceAll ;
                                                                                                        sp:arg1 [
                                                                                                            a spif:replaceAll ;
                                                                                                            sp:arg1 [
                                                                                                                a spif:replaceAll ;
                                                                                                                sp:arg1 [
                                                                                                                    a spif:replaceAll ;
                                                                                                                    sp:arg1 [
                                                                                                                        a spif:replaceAll ;
                                                                                                                        sp:arg1 [
                                                                                                                            a spif:replaceAll ;
                                                                                                                            sp:arg1 [
                                                                                                                                a spif:replaceAll ;
                                                                                                                                sp:arg1 [
                                                                                                                                    a spif:replaceAll ;
                                                                                                                                    sp:arg1 [
                                                                                                                                        a spif:replaceAll ;
                                                                                                                                        sp:arg1 [
                                                                                                                                            a spif:replaceAll ;
                                                                                                                                            sp:arg1 [
                                                                                                                                                a spif:replaceAll ;
                                                                                                                                                sp:arg1 [
                                                                                                                                                    a spif:replaceAll ;
                                                                                                                                                    sp:arg1 [
                                                                                                                                                        a spif:replaceAll ;
                                                                                                                                                        sp:arg1 [
                                                                                                                                                            a spif:replaceAll ;
                                                                                                                                                            sp:arg1 [
                                                                                                                                                                a spif:replaceAll ;
                                                                                                                                                                sp:arg1 [
                                                                                                                                                                    a spif:replaceAll ;
                                                                                                                                                                    sp:arg1 [
                                                                                                                                                                        a spif:replaceAll ;
                                                                                                                                                                        sp:arg1 [
                                                                                                                                                                            a spif:replaceAll ;
                                                                                                                                                                            sp:arg1 [
                                                                                                                                                                                a spif:replaceAll ;
                                                                                                                                                                                sp:arg1 [
                                                                                                                                                                                    a spif:replaceAll ;
                                                                                                                                                                                    sp:arg1 [
                                                                                                                                                                                        a spif:replaceAll ;
                                                                                                                                                                                        sp:arg1 spin:_arg1 ;
                                                                                                                                                                                        sp:arg2 "percent" ;
                                                                                                                                                                                        sp:arg3 "PCT" ;
                                                                                                                                                                                      ] ;
                                                                                                                                                                                    sp:arg2 "reciprocal " ;
                                                                                                                                                                                    sp:arg3 "PER" ;
                                                                                                                                                                                  ] ;
                                                                                                                                                                                sp:arg2 "per" ;
                                                                                                                                                                                sp:arg3 "PER" ;
                                                                                                                                                                              ] ;
                                                                                                                                                                            sp:arg2 "kiloampere" ;
                                                                                                                                                                            sp:arg3 "KiloA" ;
                                                                                                                                                                          ] ;
                                                                                                                                                                        sp:arg2 "milliampere" ;
                                                                                                                                                                        sp:arg3 "MilliA" ;
                                                                                                                                                                      ] ;
                                                                                                                                                                    sp:arg2 "angstrom" ;
                                                                                                                                                                    sp:arg3 "ANG" ;
                                                                                                                                                                  ] ;
                                                                                                                                                                sp:arg2 "millibar" ;
                                                                                                                                                                sp:arg3 "MilliB" ;
                                                                                                                                                              ] ;
                                                                                                                                                            sp:arg2 "cubed bar" ;
                                                                                                                                                            sp:arg3 "BAR3" ;
                                                                                                                                                          ] ;
                                                                                                                                                        sp:arg2 "bar" ;
                                                                                                                                                        sp:arg3 "BAR" ;
                                                                                                                                                      ] ;
                                                                                                                                                    sp:arg2 "barrel" ;
                                                                                                                                                    sp:arg3 "BBL" ;
                                                                                                                                                  ] ;
                                                                                                                                                sp:arg2 "baud" ;
                                                                                                                                                sp:arg3 "BAUD" ;
                                                                                                                                              ] ;
                                                                                                                                            sp:arg2 "Beaufort" ;
                                                                                                                                            sp:arg3 "B" ;
                                                                                                                                          ] ;
                                                                                                                                        sp:arg2 "terabit" ;
                                                                                                                                        sp:arg3 "TeraB" ;
                                                                                                                                      ] ;
                                                                                                                                    sp:arg2 "petabyte" ;
                                                                                                                                    sp:arg3 "PetaB" ;
                                                                                                                                  ] ;
                                                                                                                                sp:arg2 "megabit" ;
                                                                                                                                sp:arg3 "MegaB" ;
                                                                                                                              ] ;
                                                                                                                            sp:arg2 "kilobyte" ;
                                                                                                                            sp:arg3 "KiloB" ;
                                                                                                                          ] ;
                                                                                                                        sp:arg2 "British thermal unit" ;
                                                                                                                        sp:arg3 "BTU" ;
                                                                                                                      ] ;
                                                                                                                    sp:arg2 "kilocalorie" ;
                                                                                                                    sp:arg3 "KiloCAL" ;
                                                                                                                  ] ;
                                                                                                                sp:arg2 "calorie" ;
                                                                                                                sp:arg3 "CAL" ;
                                                                                                              ] ;
                                                                                                            sp:arg2 "gigacoulomb" ;
                                                                                                            sp:arg3 "GigaC" ;
                                                                                                          ] ;
                                                                                                        sp:arg2 "kilicoulomb" ;
                                                                                                        sp:arg3 "KiliC" ;
                                                                                                      ] ;
                                                                                                    sp:arg2 "day" ;
                                                                                                    sp:arg3 "DAY" ;
                                                                                                  ] ;
                                                                                                sp:arg2 "decibel" ;
                                                                                                sp:arg3 "DB" ;
                                                                                              ] ;
                                                                                            sp:arg2 "degree Bailing" ;
                                                                                            sp:arg3 "DEG_BAI" ;
                                                                                          ] ;
                                                                                        sp:arg2 "degree Baume" ;
                                                                                        sp:arg3 "DEG_BAU" ;
                                                                                      ] ;
                                                                                    sp:arg2 "degree Celsius" ;
                                                                                    sp:arg3 "DEG_C" ;
                                                                                  ] ;
                                                                                sp:arg2 "degree Fahrenheit" ;
                                                                                sp:arg3 "DEG_F" ;
                                                                              ] ;
                                                                            sp:arg2 "degree" ;
                                                                            sp:arg3 "DEG" ;
                                                                          ] ;
                                                                        sp:arg2 "dyne" ;
                                                                        sp:arg3 "DYN" ;
                                                                      ] ;
                                                                    sp:arg2 "erg" ;
                                                                    sp:arg3 "ERG" ;
                                                                  ] ;
                                                                sp:arg2 "foot" ;
                                                                sp:arg3 "FT" ;
                                                              ] ;
                                                            sp:arg2 "barn" ;
                                                            sp:arg3 "BN" ;
                                                          ] ;
                                                        sp:arg2 "picofarad" ;
                                                        sp:arg3 "PicoF" ;
                                                      ] ;
                                                    sp:arg2 "gill" ;
                                                    sp:arg3 "GIL" ;
                                                  ] ;
                                                sp:arg2 "hectogram" ;
                                                sp:arg3 "HectoGM" ;
                                              ] ;
                                            sp:arg2 "kilogram" ;
                                            sp:arg3 "KiloGM" ;
                                          ] ;
                                        sp:arg2 "milligram" ;
                                        sp:arg3 "MilliGM" ;
                                      ] ;
                                    sp:arg2 "gram" ;
                                    sp:arg3 "GM" ;
                                  ] ;
                                sp:arg2 "milligray" ;
                                sp:arg3 "MilliGRAY" ;
                              ] ;
                            sp:arg2 "gray" ;
                            sp:arg3 "GRAY" ;
                          ] ;
                        sp:arg2 "decakelvin" ;
                        sp:arg3 "DecaDEG_K" ;
                      ] ;
                    sp:arg2 "nanohenry" ;
                    sp:arg3 "NanoH" ;
                  ] ;
                sp:arg2 "millihenry" ;
                sp:arg3 "MilliH" ;
              ] ;
            sp:variable [
                sp:varName "newName" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
    ] ;
  rdfs:comment """Convert an IEC label into a qname. 1st grouping

A boatload of nested spif:replaceAll calls that do expression replacement. Here is an example:

SELECT ?arg1 ?newName3 ?newUnitQname
WHERE {
    ?arg1 a newUnits3:Export .
    ?arg1 newUnits3:unitText ?iecLabel .
    BIND (spif:replaceAll(?iecLabel, \"per\", \"PER\") AS ?newName) .
    BIND (fn:concat(\"unit:\", spif:replaceAll(?newName, \" \", \"-\")) AS ?newUnitQname) .
}

Here is a full test for convertIECLabel3:

SELECT ?arg1 ?iecLabel ?newName ?newUnitQname
WHERE {
    ?arg1 a newUnits3:Export .
    ?arg1 newUnits3:unitText ?iecLabel .
    BIND (spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(?iecLabel, \"percent\", \"PCT\"), \"reciprocal \", \"PER\"), \"per\", \"PER\"), \"kiloampere\", \"KiloA\"), \"milliampere\", \"MilliA\"), \"angstrom\", \"ANG\"), \"millibar\", \"MilliB\"), \"cubed bar\", \"BAR3\"), \"bar\", \"BAR\"), \"barrel\", \"BBL\"), \"baud\", \"BAUD\"), \"Beaufort\", \"B\"), \"terabit\", \"TeraB\"), \"petabyte\", \"PetaB\"), \"megabit\", \"MegaB\"), \"kilobyte\", \"KiloB\"), \"British thermal unit\", \"BTU\"), \"kilocalorie\", \"KiloCAL\"), \"calorie\", \"CAL\"), \"gigacoulomb\", \"GigaC\"), \"kilicoulomb\", \"KiliC\"), \"day\", \"DAY\"), \"decibel\", \"DB\"), \"degree Bailing\", \"DEG_BAI\"), \"degree Baume\", \"DEG_BAU\"), \"degree Celsius\", \"DEG_C\"), \"degree Fahrenheit\", \"DEG_F\"), \"degree\", \"DEG\"), \"dyne\", \"DYN\"), \"erg\", \"ERG\"), \"foot\", \"FT\"), \"barn\", \"BN\"), \"picofarad\", \"PicoF\"), \"gill\", \"GIL\"), \"hectogram\", \"HectoGM\"), \"kilogram\", \"KiloGM\"), \"milligram\", \"MilliGM\"), \"gram\", \"GM\"), \"milligray\", \"MilliGRAY\"), \"gray\", \"GRAY\"), \"decakelvin\", \"DecaDEG_K\"), \"nanohenry\", \"NanoH\"), \"millihenry\", \"MilliH\") AS ?newName) .
    BIND (fn:concat(\"unit:\", spif:replaceAll(?newName, \" \", \"-\")) AS ?newUnitQname) .
}

Real test:

SELECT ?arg1 ?iecLabel ?result ?newUnitQname
WHERE {
    ?arg1 a newUnits3:Export .
    ?arg1 newUnits3:unitText ?iecLabel .
    BIND (newunits_spin:convertIECLabel1(?iecLabel) AS ?result) .
    BIND (fn:concat(\"unit:\", spif:replaceAll(?result, \" \", \"-\")) AS ?newUnitQname) .
}""" ;
  rdfs:subClassOf spin:Functions ;
.
newunits_spin:convertIECLabel2
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "newName" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a spif:replaceAll ;
                sp:arg1 [
                    a spif:replaceAll ;
                    sp:arg1 [
                        a spif:replaceAll ;
                        sp:arg1 [
                            a spif:replaceAll ;
                            sp:arg1 [
                                a spif:replaceAll ;
                                sp:arg1 [
                                    a spif:replaceAll ;
                                    sp:arg1 [
                                        a spif:replaceAll ;
                                        sp:arg1 [
                                            a spif:replaceAll ;
                                            sp:arg1 [
                                                a spif:replaceAll ;
                                                sp:arg1 [
                                                    a spif:replaceAll ;
                                                    sp:arg1 [
                                                        a spif:replaceAll ;
                                                        sp:arg1 [
                                                            a spif:replaceAll ;
                                                            sp:arg1 [
                                                                a spif:replaceAll ;
                                                                sp:arg1 [
                                                                    a spif:replaceAll ;
                                                                    sp:arg1 [
                                                                        a spif:replaceAll ;
                                                                        sp:arg1 [
                                                                            a spif:replaceAll ;
                                                                            sp:arg1 [
                                                                                a spif:replaceAll ;
                                                                                sp:arg1 [
                                                                                    a spif:replaceAll ;
                                                                                    sp:arg1 [
                                                                                        a spif:replaceAll ;
                                                                                        sp:arg1 [
                                                                                            a spif:replaceAll ;
                                                                                            sp:arg1 [
                                                                                                a spif:replaceAll ;
                                                                                                sp:arg1 [
                                                                                                    a spif:replaceAll ;
                                                                                                    sp:arg1 [
                                                                                                        a spif:replaceAll ;
                                                                                                        sp:arg1 [
                                                                                                            a spif:replaceAll ;
                                                                                                            sp:arg1 [
                                                                                                                a spif:replaceAll ;
                                                                                                                sp:arg1 [
                                                                                                                    a spif:replaceAll ;
                                                                                                                    sp:arg1 [
                                                                                                                        a spif:replaceAll ;
                                                                                                                        sp:arg1 [
                                                                                                                            a spif:replaceAll ;
                                                                                                                            sp:arg1 [
                                                                                                                                a spif:replaceAll ;
                                                                                                                                sp:arg1 [
                                                                                                                                    a spif:replaceAll ;
                                                                                                                                    sp:arg1 [
                                                                                                                                        a spif:replaceAll ;
                                                                                                                                        sp:arg1 [
                                                                                                                                            a spif:replaceAll ;
                                                                                                                                            sp:arg1 [
                                                                                                                                                a spif:replaceAll ;
                                                                                                                                                sp:arg1 [
                                                                                                                                                    a spif:replaceAll ;
                                                                                                                                                    sp:arg1 [
                                                                                                                                                        a spif:replaceAll ;
                                                                                                                                                        sp:arg1 [
                                                                                                                                                            a spif:replaceAll ;
                                                                                                                                                            sp:arg1 [
                                                                                                                                                                a spif:replaceAll ;
                                                                                                                                                                sp:arg1 [
                                                                                                                                                                    a spif:replaceAll ;
                                                                                                                                                                    sp:arg1 [
                                                                                                                                                                        a spif:replaceAll ;
                                                                                                                                                                        sp:arg1 [
                                                                                                                                                                            a spif:replaceAll ;
                                                                                                                                                                            sp:arg1 [
                                                                                                                                                                                a spif:replaceAll ;
                                                                                                                                                                                sp:arg1 [
                                                                                                                                                                                    a spif:replaceAll ;
                                                                                                                                                                                    sp:arg1 [
                                                                                                                                                                                        a spif:replaceAll ;
                                                                                                                                                                                        sp:arg1 spin:_arg1 ;
                                                                                                                                                                                        sp:arg2 "henry" ;
                                                                                                                                                                                        sp:arg3 "H" ;
                                                                                                                                                                                      ] ;
                                                                                                                                                                                    sp:arg2 "megahertz " ;
                                                                                                                                                                                    sp:arg3 "MegaHZ" ;
                                                                                                                                                                                  ] ;
                                                                                                                                                                                sp:arg2 "horsepower" ;
                                                                                                                                                                                sp:arg3 "HP" ;
                                                                                                                                                                              ] ;
                                                                                                                                                                            sp:arg2 "hour" ;
                                                                                                                                                                            sp:arg3 "HR" ;
                                                                                                                                                                          ] ;
                                                                                                                                                                        sp:arg2 "cubic inch" ;
                                                                                                                                                                        sp:arg3 "IN3" ;
                                                                                                                                                                      ] ;
                                                                                                                                                                    sp:arg2 "megajoule" ;
                                                                                                                                                                    sp:arg3 "MegaJ" ;
                                                                                                                                                                  ] ;
                                                                                                                                                                sp:arg2 "joule" ;
                                                                                                                                                                sp:arg3 "J" ;
                                                                                                                                                              ] ;
                                                                                                                                                            sp:arg2 "kelvin" ;
                                                                                                                                                            sp:arg3 "DEG_K" ;
                                                                                                                                                          ] ;
                                                                                                                                                        sp:arg2 "megalitre" ;
                                                                                                                                                        sp:arg3 "MegaL" ;
                                                                                                                                                      ] ;
                                                                                                                                                    sp:arg2 "millilitre" ;
                                                                                                                                                    sp:arg3 "MilliL" ;
                                                                                                                                                  ] ;
                                                                                                                                                sp:arg2 "litre" ;
                                                                                                                                                sp:arg3 "L" ;
                                                                                                                                              ] ;
                                                                                                                                            sp:arg2 "lumen" ;
                                                                                                                                            sp:arg3 "LUM" ;
                                                                                                                                          ] ;
                                                                                                                                        sp:arg2 "metre cubed" ;
                                                                                                                                        sp:arg3 "M3" ;
                                                                                                                                      ] ;
                                                                                                                                    sp:arg2 "metre squared" ;
                                                                                                                                    sp:arg3 "M2" ;
                                                                                                                                  ] ;
                                                                                                                                sp:arg2 "kilometre" ;
                                                                                                                                sp:arg3 "KiloM" ;
                                                                                                                              ] ;
                                                                                                                            sp:arg2 "millimetre" ;
                                                                                                                            sp:arg3 "MilliM" ;
                                                                                                                          ] ;
                                                                                                                        sp:arg2 "femtometre" ;
                                                                                                                        sp:arg3 "FemtoM" ;
                                                                                                                      ] ;
                                                                                                                    sp:arg2 "square millimetre" ;
                                                                                                                    sp:arg3 "MilliM2" ;
                                                                                                                  ] ;
                                                                                                                sp:arg2 "square centimetre" ;
                                                                                                                sp:arg3 "CentiM2" ;
                                                                                                              ] ;
                                                                                                            sp:arg2 "centimetre cubed" ;
                                                                                                            sp:arg3 "CentiM3" ;
                                                                                                          ] ;
                                                                                                        sp:arg2 "metre" ;
                                                                                                        sp:arg3 "M" ;
                                                                                                      ] ;
                                                                                                    sp:arg2 "nautical mile" ;
                                                                                                    sp:arg3 "MILE_N" ;
                                                                                                  ] ;
                                                                                                sp:arg2 "minute" ;
                                                                                                sp:arg3 "MIN" ;
                                                                                              ] ;
                                                                                            sp:arg2 "micromho" ;
                                                                                            sp:arg3 "MicroMHO" ;
                                                                                          ] ;
                                                                                        sp:arg2 "kilomole" ;
                                                                                        sp:arg3 "KiloMOL" ;
                                                                                      ] ;
                                                                                    sp:arg2 "mole" ;
                                                                                    sp:arg3 "MOL" ;
                                                                                  ] ;
                                                                                sp:arg2 "centinewton" ;
                                                                                sp:arg3 "CentiN" ;
                                                                              ] ;
                                                                            sp:arg2 "newton" ;
                                                                            sp:arg3 "N" ;
                                                                          ] ;
                                                                        sp:arg2 "gigaohm" ;
                                                                        sp:arg3 "GigaOHM" ;
                                                                      ] ;
                                                                    sp:arg2 "kiloohm" ;
                                                                    sp:arg3 "KiloOHM" ;
                                                                  ] ;
                                                                sp:arg2 "milliohm" ;
                                                                sp:arg3 "MilliOHM" ;
                                                              ] ;
                                                            sp:arg2 "ohm" ;
                                                            sp:arg3 "OHM" ;
                                                          ] ;
                                                        sp:arg2 "ounce" ;
                                                        sp:arg3 "OZ" ;
                                                      ] ;
                                                    sp:arg2 "hectopascal" ;
                                                    sp:arg3 "HectoP" ;
                                                  ] ;
                                                sp:arg2 "gigapascal" ;
                                                sp:arg3 "GigaP" ;
                                              ] ;
                                            sp:arg2 "megapascal" ;
                                            sp:arg3 "Megap" ;
                                          ] ;
                                        sp:arg2 "kilopascal" ;
                                        sp:arg3 "KiloP" ;
                                      ] ;
                                    sp:arg2 "micropascal" ;
                                    sp:arg3 "MicroP" ;
                                  ] ;
                                sp:arg2 "pascal" ;
                                sp:arg3 "P" ;
                              ] ;
                            sp:arg2 "pebbit" ;
                            sp:arg3 "PebiBIT" ;
                          ] ;
                        sp:arg2 "peck" ;
                        sp:arg3 "PK" ;
                      ] ;
                    sp:arg2 "pint" ;
                    sp:arg3 "PT" ;
                  ] ;
                sp:arg2 "centipoise" ;
                sp:arg3 "CentiPS" ;
              ] ;
            sp:variable [
                sp:varName "newName" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
    ] ;
  rdfs:comment """Convert an IEC label into a qname. 2nd grouping

A boatload of nested spif:replaceAll calls that do expression replacement. Here is an example:

SELECT ?arg1 ?newName ?newUnitQname
WHERE {
    ?arg1 a newUnits3:Export .
    ?arg1 newUnits3:unitText ?iecLabel .
    BIND (spif:replaceAll(?iecLabel, \"per\", \"PER\") AS ?newName) .
    BIND (fn:concat(\"unit:\", spif:replaceAll(?newName, \" \", \"-\")) AS ?newUnitQname) .
}

Here is a full test for convertIECLabel2:

SELECT ?arg1 ?iecLabel ?newName ?newUnitQname
WHERE {
    ?arg1 a newUnits3:Export .
    ?arg1 newUnits3:unitText ?iecLabel .
    BIND (spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(?iecLabel, \"percent\", \"PCT\"), \"reciprocal \", \"PER\"), \"per\", \"PER\"), \"kiloampere\", \"KiloA\"), \"milliampere\", \"MilliA\"), \"angstrom\", \"ANG\"), \"millibar\", \"MilliB\"), \"cubed bar\", \"BAR3\"), \"bar\", \"BAR\"), \"barrel\", \"BBL\"), \"baud\", \"BAUD\"), \"Beaufort\", \"B\"), \"terabit\", \"TeraB\"), \"petabyte\", \"PetaB\"), \"megabit\", \"MegaB\"), \"kilobyte\", \"KiloB\"), \"British thermal unit\", \"BTU\"), \"kilocalorie\", \"KiloCAL\"), \"calorie\", \"CAL\"), \"gigacoulomb\", \"GigaC\"), \"kilicoulomb\", \"KiliC\"), \"day\", \"DAY\"), \"decibel\", \"DB\"), \"degree Bailing\", \"DEG_BAI\"), \"degree Baume\", \"DEG_BAU\"), \"degree Celsius\", \"DEG_C\"), \"degree Fahrenheit\", \"DEG_F\"), \"degree\", \"DEG\"), \"dyne\", \"DYN\"), \"erg\", \"ERG\"), \"foot\", \"FT\"), \"barn\", \"BN\"), \"picofarad\", \"PicoF\"), \"gill\", \"GIL\"), \"hectogram\", \"HectoGM\"), \"kilogram\", \"KiloGM\"), \"milligram\", \"MilliGM\"), \"gram\", \"GM\"), \"milligray\", \"MilliGRAY\"), \"gray\", \"GRAY\"), \"decakelvin\", \"DecaDEG_K\"), \"nanohenry\", \"NanoH\"), \"millihenry\", \"MilliH\") AS ?newName) .
    BIND (fn:concat(\"unit:\", spif:replaceAll(?newName, \" \", \"-\")) AS ?newUnitQname) .
}

Real test:

SELECT ?arg1 ?iecLabel ?result ?newUnitQname
WHERE {
    ?arg1 a newUnits3:Export .
    ?arg1 newUnits3:unitText ?iecLabel .
    BIND (newunits_spin:convertIECLabel2(?iecLabel) AS ?result) .
    BIND (fn:concat(\"unit:\", spif:replaceAll(?result, \" \", \"-\")) AS ?newUnitQname) .
}""" ;
  rdfs:subClassOf spin:Functions ;
.
newunits_spin:convertIECLabel3
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "newName" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a spif:replaceAll ;
                sp:arg1 [
                    a spif:replaceAll ;
                    sp:arg1 [
                        a spif:replaceAll ;
                        sp:arg1 [
                            a spif:replaceAll ;
                            sp:arg1 [
                                a spif:replaceAll ;
                                sp:arg1 [
                                    a spif:replaceAll ;
                                    sp:arg1 [
                                        a spif:replaceAll ;
                                        sp:arg1 [
                                            a spif:replaceAll ;
                                            sp:arg1 [
                                                a spif:replaceAll ;
                                                sp:arg1 [
                                                    a spif:replaceAll ;
                                                    sp:arg1 [
                                                        a spif:replaceAll ;
                                                        sp:arg1 [
                                                            a spif:replaceAll ;
                                                            sp:arg1 [
                                                                a spif:replaceAll ;
                                                                sp:arg1 [
                                                                    a spif:replaceAll ;
                                                                    sp:arg1 [
                                                                        a spif:replaceAll ;
                                                                        sp:arg1 [
                                                                            a spif:replaceAll ;
                                                                            sp:arg1 [
                                                                                a spif:replaceAll ;
                                                                                sp:arg1 [
                                                                                    a spif:replaceAll ;
                                                                                    sp:arg1 [
                                                                                        a spif:replaceAll ;
                                                                                        sp:arg1 [
                                                                                            a spif:replaceAll ;
                                                                                            sp:arg1 [
                                                                                                a spif:replaceAll ;
                                                                                                sp:arg1 [
                                                                                                    a spif:replaceAll ;
                                                                                                    sp:arg1 [
                                                                                                        a spif:replaceAll ;
                                                                                                        sp:arg1 [
                                                                                                            a spif:replaceAll ;
                                                                                                            sp:arg1 [
                                                                                                                a spif:replaceAll ;
                                                                                                                sp:arg1 [
                                                                                                                    a spif:replaceAll ;
                                                                                                                    sp:arg1 [
                                                                                                                        a spif:replaceAll ;
                                                                                                                        sp:arg1 [
                                                                                                                            a spif:replaceAll ;
                                                                                                                            sp:arg1 [
                                                                                                                                a spif:replaceAll ;
                                                                                                                                sp:arg1 [
                                                                                                                                    a spif:replaceAll ;
                                                                                                                                    sp:arg1 [
                                                                                                                                        a spif:replaceAll ;
                                                                                                                                        sp:arg1 [
                                                                                                                                            a spif:replaceAll ;
                                                                                                                                            sp:arg1 [
                                                                                                                                                a spif:replaceAll ;
                                                                                                                                                sp:arg1 [
                                                                                                                                                    a spif:replaceAll ;
                                                                                                                                                    sp:arg1 [
                                                                                                                                                        a spif:replaceAll ;
                                                                                                                                                        sp:arg1 [
                                                                                                                                                            a spif:replaceAll ;
                                                                                                                                                            sp:arg1 [
                                                                                                                                                                a spif:replaceAll ;
                                                                                                                                                                sp:arg1 [
                                                                                                                                                                    a spif:replaceAll ;
                                                                                                                                                                    sp:arg1 [
                                                                                                                                                                        a spif:replaceAll ;
                                                                                                                                                                        sp:arg1 [
                                                                                                                                                                            a spif:replaceAll ;
                                                                                                                                                                            sp:arg1 [
                                                                                                                                                                                a spif:replaceAll ;
                                                                                                                                                                                sp:arg1 [
                                                                                                                                                                                    a spif:replaceAll ;
                                                                                                                                                                                    sp:arg1 [
                                                                                                                                                                                        a spif:replaceAll ;
                                                                                                                                                                                        sp:arg1 spin:_arg1 ;
                                                                                                                                                                                        sp:arg2 "pound-force" ;
                                                                                                                                                                                        sp:arg3 "Force_LB" ;
                                                                                                                                                                                      ] ;
                                                                                                                                                                                    sp:arg2 "pound " ;
                                                                                                                                                                                    sp:arg3 "PD" ;
                                                                                                                                                                                  ] ;
                                                                                                                                                                                sp:arg2 "milliradian" ;
                                                                                                                                                                                sp:arg3 "MilliRAD" ;
                                                                                                                                                                              ] ;
                                                                                                                                                                            sp:arg2 "quart" ;
                                                                                                                                                                            sp:arg3 "QT" ;
                                                                                                                                                                          ] ;
                                                                                                                                                                        sp:arg2 "roentgen" ;
                                                                                                                                                                        sp:arg3 "RT" ;
                                                                                                                                                                      ] ;
                                                                                                                                                                    sp:arg2 "second squared" ;
                                                                                                                                                                    sp:arg3 "SEC2" ;
                                                                                                                                                                  ] ;
                                                                                                                                                                sp:arg2 "second" ;
                                                                                                                                                                sp:arg3 "SEC" ;
                                                                                                                                                              ] ;
                                                                                                                                                            sp:arg2 "microsiemens" ;
                                                                                                                                                            sp:arg3 "MicoSM" ;
                                                                                                                                                          ] ;
                                                                                                                                                        sp:arg2 "siemens" ;
                                                                                                                                                        sp:arg3 "SM" ;
                                                                                                                                                      ] ;
                                                                                                                                                    sp:arg2 "sone" ;
                                                                                                                                                    sp:arg3 "SONE" ;
                                                                                                                                                  ] ;
                                                                                                                                                sp:arg2 "stone" ;
                                                                                                                                                sp:arg3 "ST" ;
                                                                                                                                              ] ;
                                                                                                                                            sp:arg2 "tonne" ;
                                                                                                                                            sp:arg3 "TON_METRIC" ;
                                                                                                                                          ] ;
                                                                                                                                        sp:arg2 "millivolt" ;
                                                                                                                                        sp:arg3 "MilliV" ;
                                                                                                                                      ] ;
                                                                                                                                    sp:arg2 "megavolt" ;
                                                                                                                                    sp:arg3 "MegaV" ;
                                                                                                                                  ] ;
                                                                                                                                sp:arg2 "kilovolt" ;
                                                                                                                                sp:arg3 "KiloV" ;
                                                                                                                              ] ;
                                                                                                                            sp:arg2 "electronvolt" ;
                                                                                                                            sp:arg3 "EV" ;
                                                                                                                          ] ;
                                                                                                                        sp:arg2 "volt" ;
                                                                                                                        sp:arg3 "V" ;
                                                                                                                      ] ;
                                                                                                                    sp:arg2 "picowatt" ;
                                                                                                                    sp:arg3 "PicoW" ;
                                                                                                                  ] ;
                                                                                                                sp:arg2 "terawatt" ;
                                                                                                                sp:arg3 "TeraW" ;
                                                                                                              ] ;
                                                                                                            sp:arg2 "watt" ;
                                                                                                            sp:arg3 "W" ;
                                                                                                          ] ;
                                                                                                        sp:arg2 "weber" ;
                                                                                                        sp:arg3 "WB" ;
                                                                                                      ] ;
                                                                                                    sp:arg2 "cubic yard" ;
                                                                                                    sp:arg3 "YD3" ;
                                                                                                  ] ;
                                                                                                sp:arg2 "square yard" ;
                                                                                                sp:arg3 "YD2" ;
                                                                                              ] ;
                                                                                            sp:arg2 "yard" ;
                                                                                            sp:arg3 "YD" ;
                                                                                          ] ;
                                                                                        sp:arg2 "degree Brix" ;
                                                                                        sp:arg3 "DEG_BRIX" ;
                                                                                      ] ;
                                                                                    sp:arg2 "degree Oechsle" ;
                                                                                    sp:arg3 "DEG_O" ;
                                                                                  ] ;
                                                                                sp:arg2 "degree Plato" ;
                                                                                sp:arg3 "DEG_P" ;
                                                                              ] ;
                                                                            sp:arg2 "degree Rankine" ;
                                                                            sp:arg3 "DEG_R" ;
                                                                          ] ;
                                                                        sp:arg2 "degree Twaddell" ;
                                                                        sp:arg3 "DEG_T" ;
                                                                      ] ;
                                                                    sp:arg2 "micoohm" ;
                                                                    sp:arg3 "MicroOHM" ;
                                                                  ] ;
                                                                sp:arg2 "milliohm" ;
                                                                sp:arg3 "MilliOHM" ;
                                                              ] ;
                                                            sp:arg2 "curie" ;
                                                            sp:arg3 "CU" ;
                                                          ] ;
                                                        sp:arg2 "farad" ;
                                                        sp:arg3 "F" ;
                                                      ] ;
                                                    sp:arg2 "square inch" ;
                                                    sp:arg3 "IN2" ;
                                                  ] ;
                                                sp:arg2 "inch" ;
                                                sp:arg3 "IN" ;
                                              ] ;
                                            sp:arg2 "hertz" ;
                                            sp:arg3 "HZ" ;
                                          ] ;
                                        sp:arg2 "gauss" ;
                                        sp:arg3 "GA" ;
                                      ] ;
                                    sp:arg2 "oerstad" ;
                                    sp:arg3 "OE" ;
                                  ] ;
                                sp:arg2 "knot" ;
                                sp:arg3 "KT" ;
                              ] ;
                            sp:arg2 "coulomb" ;
                            sp:arg3 "COU" ;
                          ] ;
                        sp:arg2 "furlong" ;
                        sp:arg3 "FUR" ;
                      ] ;
                    sp:arg2 "gilbert" ;
                    sp:arg3 "GIL" ;
                  ] ;
                sp:arg2 "lambert" ;
                sp:arg3 "LA" ;
              ] ;
            sp:variable [
                sp:varName "newName" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
    ] ;
  rdfs:comment """Convert an IEC label into a qname. 3rd grouping

A boatload of nested spif:replaceAll calls that do expression replacement. Here is an example:

SELECT ?arg1 ?newName3 ?newUnitQname
WHERE {
    ?arg1 a newUnits3:Export .
    ?arg1 newUnits3:unitText ?iecLabel .
    BIND (spif:replaceAll(?iecLabel, \"per\", \"PER\") AS ?newName) .
    BIND (fn:concat(\"unit:\", spif:replaceAll(?newName, \" \", \"-\")) AS ?newUnitQname) .
}

Here is a full test for convertIECLabel3:

SELECT ?arg1 ?iecLabel ?newName3 ?newUnitQname
WHERE {
    ?arg1 a newUnits3:Export .
    ?arg1 newUnits3:unitText ?iecLabel .
    BIND (spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(spif:replaceAll(?arg1, \"pound-force\", \"Force_LB\"), \"pound \", \"PD\"), \"milliradian\", \"MilliRAD\"), \"quart\", \"QT\"), \"roentgen\", \"RT\"), \"second squared\", \"SEC2\"), \"second\", \"SEC\"), \"microsiemens\", \"MicoSM\"), \"siemens\", \"SM\"), \"sone\", \"SONE\"), \"stone\", \"ST\"), \"tonne\", \"TON_METRIC\"), \"millivolt\", \"MilliV\"), \"megavolt\", \"MegaV\"), \"kilovolt\", \"KiloV\"), \"electronvolt\", \"EV\"), \"volt\", \"V\"), \"picowatt\", \"PicoW\"), \"terawatt\", \"TeraW\"), \"watt\", \"W\"), \"weber\", \"WB\"), \"cubic yard\", \"YD3\"), \"square yard\", \"YD2\"), \"yard\", \"YD\"), \"degree Brix\", \"DEG_BRIX\"), \"degree Oechsle\", \"DEG_O\"), \"degree Plato\", \"DEG_P\"), \"degree Rankine\", \"DEG_R\"), \"degree Twaddell\", \"DEG_T\"), \"micoohm\", \"MicroOHM\"), \"milliohm\", \"MilliOHM\"), \"curie\", \"CU\"), \"farad\", \"F\"), \"square inch\", \"IN2\"), \"inch\", \"IN\"), \"hertz\", \"HZ\"), \"gauss\", \"GA\"), \"oerstad\", \"OE\"), \"knot\", \"KT\"), \"coulomb\", \"COU\"), \"furlong\", \"FUR\"), \"gilbert\", \"GIL\"), \"lambert\", \"LA\") AS ?newName) .
    BIND (fn:concat(\"unit:\", spif:replaceAll(?newName3, \" \", \"-\")) AS ?newUnitQname) .
}

Real test:

SELECT ?arg1 ?iecLabel ?result ?newUnitQname
WHERE {
    ?arg1 a newUnits3:Export .
    ?arg1 newUnits3:unitText ?iecLabel .
    BIND (newunits_spin:convertIECLabel3(?iecLabel) AS ?result) .
    BIND (fn:concat(\"unit:\", spif:replaceAll(?result, \" \", \"-\")) AS ?newUnitQname) .
}""" ;
  rdfs:subClassOf spin:Functions ;
.
newunits_spin:convertString
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "?0" ;
              ] ;
            sp:predicate spif:split ;
            sp:subject [
                sp:varName "str" ;
              ] ;
          ]
          [
            sp:object spin:_arg1 ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?1" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object " " ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a fn:starts-with ;
                    sp:arg1 [
                        sp:varName "str" ;
                      ] ;
                    sp:arg2 "m" ;
                  ] ;
                sp:arg2 "M" ;
                sp:arg3 [
                    a sp:if ;
                    sp:arg1 [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "str" ;
                          ] ;
                        sp:arg2 "kg" ;
                      ] ;
                    sp:arg2 "KG" ;
                    sp:arg3 [
                        a sp:if ;
                        sp:arg1 [
                            a fn:starts-with ;
                            sp:arg1 [
                                sp:varName "str" ;
                              ] ;
                            sp:arg2 "A" ;
                          ] ;
                        sp:arg2 "A" ;
                        sp:arg3 [
                            a sp:if ;
                            sp:arg1 [
                                a fn:starts-with ;
                                sp:arg1 [
                                    sp:varName "str" ;
                                  ] ;
                                sp:arg2 "K" ;
                              ] ;
                            sp:arg2 "K" ;
                            sp:arg3 [
                                a sp:if ;
                                sp:arg1 [
                                    a fn:starts-with ;
                                    sp:arg1 [
                                        sp:varName "str" ;
                                      ] ;
                                    sp:arg2 "sr" ;
                                  ] ;
                                sp:arg2 "SR" ;
                                sp:arg3 [
                                    a sp:if ;
                                    sp:arg1 [
                                        a fn:starts-with ;
                                        sp:arg1 [
                                            sp:varName "str" ;
                                          ] ;
                                        sp:arg2 "mol" ;
                                      ] ;
                                    sp:arg2 "MOL" ;
                                    sp:arg3 [
                                        a sp:if ;
                                        sp:arg1 [
                                            a fn:starts-with ;
                                            sp:arg1 [
                                                sp:varName "str" ;
                                              ] ;
                                            sp:arg2 "rad" ;
                                          ] ;
                                        sp:arg2 "RAD" ;
                                        sp:arg3 [
                                            a sp:if ;
                                            sp:arg1 [
                                                a fn:starts-with ;
                                                sp:arg1 [
                                                    sp:varName "cd" ;
                                                  ] ;
                                                sp:arg2 "kg" ;
                                              ] ;
                                            sp:arg2 "CD" ;
                                            sp:arg3 [
                                                a sp:if ;
                                                sp:arg1 [
                                                    a fn:starts-with ;
                                                    sp:arg1 [
                                                        sp:varName "str" ;
                                                      ] ;
                                                    sp:arg2 "s" ;
                                                  ] ;
                                                sp:arg2 "S" ;
                                                sp:arg3 "" ;
                                              ] ;
                                          ] ;
                                      ] ;
                                  ] ;
                              ] ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "unit" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a fn:string-length ;
                sp:arg1 [
                    sp:varName "unit" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "unitlength" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:eq ;
                    sp:arg1 [
                        a fn:substring ;
                        sp:arg1 [
                            sp:varName "str" ;
                          ] ;
                        sp:arg2 [
                            a sp:add ;
                            sp:arg1 [
                                sp:varName "unitlength" ;
                              ] ;
                            sp:arg2 1 ;
                          ] ;
                        sp:arg3 1 ;
                      ] ;
                    sp:arg2 "-" ;
                  ] ;
                sp:arg2 "PER-" ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "inv" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a fn:substring ;
                sp:arg1 [
                    sp:varName "str" ;
                  ] ;
                sp:arg2 [
                    a sp:add ;
                    sp:arg1 [
                        sp:varName "unitlength" ;
                      ] ;
                    sp:arg2 [
                        a sp:if ;
                        sp:arg1 [
                            a sp:eq ;
                            sp:arg1 [
                                sp:varName "inv" ;
                              ] ;
                            sp:arg2 "PER-" ;
                          ] ;
                        sp:arg2 2 ;
                        sp:arg3 1 ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "exp" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a fn:concat ;
                sp:arg1 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:eq ;
                        sp:arg1 [
                            sp:varName "inv" ;
                          ] ;
                        sp:arg2 "PER-" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "inv" ;
                      ] ;
                    sp:arg3 "" ;
                  ] ;
                sp:arg2 [
                    sp:varName "unit" ;
                  ] ;
                sp:arg3 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:eq ;
                        sp:arg1 [
                            sp:varName "exp" ;
                          ] ;
                        sp:arg2 "1" ;
                      ] ;
                    sp:arg2 "" ;
                    sp:arg3 [
                        sp:varName "exp" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
    ] ;
  rdfs:comment """Convert something like s⁻¹ into PER-S

Separate into what is before the number from the number
    If no number, convert unit and return
    If number,""" ;
  rdfs:subClassOf spin:Functions ;
.
newunits_spin:getAggregateDimension
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "unitdv" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a fn:concat ;
                sp:arg1 [
                    a sp:if ;
                    sp:arg1 [
                        a fn:starts-with ;
                        sp:arg1 spin:_arg1 ;
                        sp:arg2 "A" ;
                      ] ;
                    sp:arg2 spin:_arg1 ;
                    sp:arg3 "A0" ;
                  ] ;
                sp:arg2 [
                    a sp:if ;
                    sp:arg1 [
                        a fn:starts-with ;
                        sp:arg1 spin:_arg1 ;
                        sp:arg2 "E" ;
                      ] ;
                    sp:arg2 spin:_arg1 ;
                    sp:arg3 "E0" ;
                  ] ;
                sp:arg3 [
                    a sp:if ;
                    sp:arg1 [
                        a fn:starts-with ;
                        sp:arg1 spin:_arg1 ;
                        sp:arg2 "L" ;
                      ] ;
                    sp:arg2 spin:_arg1 ;
                    sp:arg3 "L0" ;
                  ] ;
                sp:arg4 [
                    a sp:if ;
                    sp:arg1 [
                        a fn:starts-with ;
                        sp:arg1 spin:_arg1 ;
                        sp:arg2 "I" ;
                      ] ;
                    sp:arg2 spin:_arg1 ;
                    sp:arg3 "I0" ;
                  ] ;
                sp:arg5 [
                    a sp:if ;
                    sp:arg1 [
                        a fn:starts-with ;
                        sp:arg1 spin:_arg1 ;
                        sp:arg2 "M" ;
                      ] ;
                    sp:arg2 spin:_arg1 ;
                    sp:arg3 "M0" ;
                  ] ;
                sp:arg6 [
                    a sp:if ;
                    sp:arg1 [
                        a fn:starts-with ;
                        sp:arg1 spin:_arg1 ;
                        sp:arg2 "H" ;
                      ] ;
                    sp:arg2 spin:_arg1 ;
                    sp:arg3 "H0" ;
                  ] ;
                sp:arg7 [
                    a sp:if ;
                    sp:arg1 [
                        a fn:starts-with ;
                        sp:arg1 spin:_arg1 ;
                        sp:arg2 "T" ;
                      ] ;
                    sp:arg2 spin:_arg1 ;
                    sp:arg3 "T0" ;
                  ] ;
                sp:arg8 [
                    a sp:if ;
                    sp:arg1 [
                        a fn:starts-with ;
                        sp:arg1 spin:_arg1 ;
                        sp:arg2 "D" ;
                      ] ;
                    sp:arg2 spin:_arg1 ;
                    sp:arg3 "D0" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "unitdv" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
    ] ;
  rdfs:comment """Convert something like \"L\" and \"T-1\" into \"A0E0LI0M0H0T0D0\" and \"A0E0L0M-1H0T0D0\"

1. Concatenate one of each element type into a full dimension vector string
     a. Compare the argument against each element type (e.g., \"A\" or \"M\")
         i) If there is a match, return the element (e.g., \"A1\" or \"M-1\")
        ii) Otherwise return the template value for the element (e.g., \"A0\" or \"M0\")

REAL TEST:

SELECT ?result
WHERE {
    ?arg1 a newUnits3:Export .
    BIND (newunits_spin:convertDimensions(?arg1) AS ?dvstring) .
    ?dvstring newunits_spin:getDimensionComponentsProperty ?itemresult .
    BIND (newunits_spin:getAggregateDimension(?itemresult) AS ?result) .
}

FULL SPARQL TEST:

SELECT ?result
WHERE {
    ?arg1 a newUnits3:Export .
    ?unit newUnits3:primaryUnit ?IEC_UNIT .
    BIND (newunits_spin:convertDimensions(?arg1) AS ?result) .
    ?elem spif:split (?result \" \") .
    BIND (fn:concat(IF (fn:starts-with(?elem, \"A\"), ?elem, \"A0\"), 
                                    IF (fn:starts-with(?elem, \"E\"), ?elem, \"E0\"),
                                        IF (fn:starts-with(?elem, \"L\"), ?elem, \"L0\"),
                                            IF (fn:starts-with(?elem, \"I\"), ?elem, \"I0\"),
                                                IF (fn:starts-with(?elem, \"M\"), ?elem, \"M0\"),
                                                    IF (fn:starts-with(?elem, \"H\"), ?elem, \"H0\"),
                                                        IF (fn:starts-with(?elem, \"T\"), ?elem, \"T0\"),
                                                            IF (fn:starts-with(?elem, \"D\"), ?elem, \"D0\")) AS ?itemresult) .
}

Send the result into a function that will break the result up and rewrite the template based on the items in it""" ;
  rdfs:subClassOf spin:Functions ;
.
newunits_spin:getDimensionComponents
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "unitDVComponent" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "?0" ;
              ] ;
            sp:predicate spif:split ;
            sp:subject [
                sp:varName "elem" ;
              ] ;
          ]
          [
            sp:object spin:_arg1 ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?1" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object " " ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:and ;
                    sp:arg1 [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 "A" ;
                      ] ;
                    sp:arg2 [
                        a sp:eq ;
                        sp:arg1 [
                            a fn:string-length ;
                            sp:arg1 [
                                sp:varName "elem" ;
                              ] ;
                          ] ;
                        sp:arg2 1 ;
                      ] ;
                  ] ;
                sp:arg2 "1" ;
                sp:arg3 [
                    a sp:if ;
                    sp:arg1 [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 "A" ;
                      ] ;
                    sp:arg2 [
                        a fn:substring ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 2 ;
                      ] ;
                    sp:arg3 "" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "apower" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:and ;
                    sp:arg1 [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 "E" ;
                      ] ;
                    sp:arg2 [
                        a sp:eq ;
                        sp:arg1 [
                            a fn:string-length ;
                            sp:arg1 [
                                sp:varName "elem" ;
                              ] ;
                          ] ;
                        sp:arg2 1 ;
                      ] ;
                  ] ;
                sp:arg2 "1" ;
                sp:arg3 [
                    a sp:if ;
                    sp:arg1 [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 "E" ;
                      ] ;
                    sp:arg2 [
                        a fn:substring ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 2 ;
                      ] ;
                    sp:arg3 "" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "epower" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:and ;
                    sp:arg1 [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 "L" ;
                      ] ;
                    sp:arg2 [
                        a sp:eq ;
                        sp:arg1 [
                            a fn:string-length ;
                            sp:arg1 [
                                sp:varName "elem" ;
                              ] ;
                          ] ;
                        sp:arg2 1 ;
                      ] ;
                  ] ;
                sp:arg2 "1" ;
                sp:arg3 [
                    a sp:if ;
                    sp:arg1 [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 "L" ;
                      ] ;
                    sp:arg2 [
                        a fn:substring ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 2 ;
                      ] ;
                    sp:arg3 "" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "lpower" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:and ;
                    sp:arg1 [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 "I" ;
                      ] ;
                    sp:arg2 [
                        a sp:eq ;
                        sp:arg1 [
                            a fn:string-length ;
                            sp:arg1 [
                                sp:varName "elem" ;
                              ] ;
                          ] ;
                        sp:arg2 1 ;
                      ] ;
                  ] ;
                sp:arg2 "1" ;
                sp:arg3 [
                    a sp:if ;
                    sp:arg1 [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 "I" ;
                      ] ;
                    sp:arg2 [
                        a fn:substring ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 2 ;
                      ] ;
                    sp:arg3 "" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "ipower" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:and ;
                    sp:arg1 [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 "M" ;
                      ] ;
                    sp:arg2 [
                        a sp:eq ;
                        sp:arg1 [
                            a fn:string-length ;
                            sp:arg1 [
                                sp:varName "elem" ;
                              ] ;
                          ] ;
                        sp:arg2 1 ;
                      ] ;
                  ] ;
                sp:arg2 "1" ;
                sp:arg3 [
                    a sp:if ;
                    sp:arg1 [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 "M" ;
                      ] ;
                    sp:arg2 [
                        a fn:substring ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 2 ;
                      ] ;
                    sp:arg3 "" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "mpower" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:and ;
                    sp:arg1 [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 "H" ;
                      ] ;
                    sp:arg2 [
                        a sp:eq ;
                        sp:arg1 [
                            a fn:string-length ;
                            sp:arg1 [
                                sp:varName "elem" ;
                              ] ;
                          ] ;
                        sp:arg2 1 ;
                      ] ;
                  ] ;
                sp:arg2 "1" ;
                sp:arg3 [
                    a sp:if ;
                    sp:arg1 [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 "H" ;
                      ] ;
                    sp:arg2 [
                        a fn:substring ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 2 ;
                      ] ;
                    sp:arg3 "" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "hpower" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:and ;
                    sp:arg1 [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 "T" ;
                      ] ;
                    sp:arg2 [
                        a sp:eq ;
                        sp:arg1 [
                            a fn:string-length ;
                            sp:arg1 [
                                sp:varName "elem" ;
                              ] ;
                          ] ;
                        sp:arg2 1 ;
                      ] ;
                  ] ;
                sp:arg2 "1" ;
                sp:arg3 [
                    a sp:if ;
                    sp:arg1 [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 "T" ;
                      ] ;
                    sp:arg2 [
                        a fn:substring ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 2 ;
                      ] ;
                    sp:arg3 "" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "tpower" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:and ;
                    sp:arg1 [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 "D" ;
                      ] ;
                    sp:arg2 [
                        a sp:eq ;
                        sp:arg1 [
                            a fn:string-length ;
                            sp:arg1 [
                                sp:varName "elem" ;
                              ] ;
                          ] ;
                        sp:arg2 1 ;
                      ] ;
                  ] ;
                sp:arg2 "1" ;
                sp:arg3 [
                    a sp:if ;
                    sp:arg1 [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 "D" ;
                      ] ;
                    sp:arg2 [
                        a fn:substring ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 2 ;
                      ] ;
                    sp:arg3 "" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "dpower" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a fn:concat ;
                sp:arg1 "A" ;
                sp:arg2 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:ne ;
                        sp:arg1 [
                            sp:varName "apower" ;
                          ] ;
                        sp:arg2 "" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "apower" ;
                      ] ;
                    sp:arg3 "0" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "aresult" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a fn:concat ;
                sp:arg1 "E" ;
                sp:arg2 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:ne ;
                        sp:arg1 [
                            sp:varName "epower" ;
                          ] ;
                        sp:arg2 "" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "epower" ;
                      ] ;
                    sp:arg3 "0" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "eresult" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a fn:concat ;
                sp:arg1 "L" ;
                sp:arg2 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:ne ;
                        sp:arg1 [
                            sp:varName "lpower" ;
                          ] ;
                        sp:arg2 "" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "lpower" ;
                      ] ;
                    sp:arg3 "0" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "lresult" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a fn:concat ;
                sp:arg1 "I" ;
                sp:arg2 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:ne ;
                        sp:arg1 [
                            sp:varName "ipower" ;
                          ] ;
                        sp:arg2 "" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "ipower" ;
                      ] ;
                    sp:arg3 "0" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "iresult" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a fn:concat ;
                sp:arg1 "M" ;
                sp:arg2 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:ne ;
                        sp:arg1 [
                            sp:varName "mpower" ;
                          ] ;
                        sp:arg2 "" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "mpower" ;
                      ] ;
                    sp:arg3 "0" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "mresult" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a fn:concat ;
                sp:arg1 "H" ;
                sp:arg2 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:ne ;
                        sp:arg1 [
                            sp:varName "hpower" ;
                          ] ;
                        sp:arg2 "" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "hpower" ;
                      ] ;
                    sp:arg3 "0" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "hresult" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a fn:concat ;
                sp:arg1 "T" ;
                sp:arg2 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:ne ;
                        sp:arg1 [
                            sp:varName "tpower" ;
                          ] ;
                        sp:arg2 "" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "tpower" ;
                      ] ;
                    sp:arg3 "0" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "tresult" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a fn:concat ;
                sp:arg1 "D" ;
                sp:arg2 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:ne ;
                        sp:arg1 [
                            sp:varName "dpower" ;
                          ] ;
                        sp:arg2 "" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "dpower" ;
                      ] ;
                    sp:arg3 "0" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "dresult" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a fn:concat ;
                sp:arg1 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:ne ;
                        sp:arg1 [
                            sp:varName "aresult" ;
                          ] ;
                        sp:arg2 "A0" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "aresult" ;
                      ] ;
                    sp:arg3 "" ;
                  ] ;
                sp:arg2 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:ne ;
                        sp:arg1 [
                            sp:varName "eresult" ;
                          ] ;
                        sp:arg2 "E0" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "eresult" ;
                      ] ;
                    sp:arg3 "" ;
                  ] ;
                sp:arg3 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:ne ;
                        sp:arg1 [
                            sp:varName "lresult" ;
                          ] ;
                        sp:arg2 "L0" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "lresult" ;
                      ] ;
                    sp:arg3 "" ;
                  ] ;
                sp:arg4 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:ne ;
                        sp:arg1 [
                            sp:varName "iresult" ;
                          ] ;
                        sp:arg2 "I0" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "iresult" ;
                      ] ;
                    sp:arg3 "" ;
                  ] ;
                sp:arg5 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:ne ;
                        sp:arg1 [
                            sp:varName "mresult" ;
                          ] ;
                        sp:arg2 "M0" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "mresult" ;
                      ] ;
                    sp:arg3 "" ;
                  ] ;
                sp:arg6 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:ne ;
                        sp:arg1 [
                            sp:varName "hresult" ;
                          ] ;
                        sp:arg2 "H0" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "hresult" ;
                      ] ;
                    sp:arg3 "" ;
                  ] ;
                sp:arg7 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:ne ;
                        sp:arg1 [
                            sp:varName "tresult" ;
                          ] ;
                        sp:arg2 "T0" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "tresult" ;
                      ] ;
                    sp:arg3 "" ;
                  ] ;
                sp:arg8 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:ne ;
                        sp:arg1 [
                            sp:varName "dresult" ;
                          ] ;
                        sp:arg2 "D0" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "dresult" ;
                      ] ;
                    sp:arg3 "" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "unitDVComponent" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
    ] ;
  rdfs:comment """Convert something like m2 s-1 into L T-1

1. Split arg1 (which is the long string but without single exponents) into elements (?elem)
2. Pull out the power for each of the element types (A, E, L, I, M, H, T, and D), and locally bind as tpe power (?apower, ?epower, etc.)
3. Create element results by concatenating the element type (e.g., \"A\") with the right power (\"0\", \"1\", or power)
4. Aggregate the element results

REAL TEST:

SELECT ?comp
WHERE {
    ?arg1 a newUnits3:Export .
    BIND (newunits_spin:convertDimensions(?arg1) AS ?cresult) .
    BIND (newunits_spin:getDimensionComponents(?cresult) AS ?comp) .
}

FULL SPARQL TEST:

SELECT ?result
WHERE {
    ?arg1 a newUnits3:Export .
    ?unit newUnits3:primaryUnit ?IEC_UNIT .
    BIND (newunits_spin:convertDimensions(?arg1) AS ?result) .
    ?elem spif:split (?result \" \") .
    BIND (fn:concat(IF (fn:starts-with(?elem, \"A\"), ?elem, \"A0\"), 
                                    IF (fn:starts-with(?elem, \"E\"), ?elem, \"E0\"),
                                        IF (fn:starts-with(?elem, \"L\"), ?elem, \"L0\"),
                                            IF (fn:starts-with(?elem, \"I\"), ?elem, \"I0\"),
                                                IF (fn:starts-with(?elem, \"M\"), ?elem, \"M0\"),
                                                    IF (fn:starts-with(?elem, \"H\"), ?elem, \"H0\"),
                                                        IF (fn:starts-with(?elem, \"T\"), ?elem, \"T0\"),
                                                            IF (fn:starts-with(?elem, \"D\"), ?elem, \"D0\")) AS ?itemresult) .
}

Send the result into a function that will break the result up and rewrite the template based on the items in it""" ;
  rdfs:subClassOf spin:Functions ;
.
newunits_spin:getDimensionComponentsProperty
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "?0" ;
              ] ;
            sp:predicate spif:split ;
            sp:subject [
                sp:varName "elem" ;
              ] ;
          ]
          [
            sp:object spin:_arg1 ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?1" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object " " ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:and ;
                    sp:arg1 [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 "A" ;
                      ] ;
                    sp:arg2 [
                        a sp:eq ;
                        sp:arg1 [
                            a fn:string-length ;
                            sp:arg1 [
                                sp:varName "elem" ;
                              ] ;
                          ] ;
                        sp:arg2 1 ;
                      ] ;
                  ] ;
                sp:arg2 "1" ;
                sp:arg3 [
                    a sp:if ;
                    sp:arg1 [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 "A" ;
                      ] ;
                    sp:arg2 [
                        a fn:substring ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 2 ;
                      ] ;
                    sp:arg3 "" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "apower" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:and ;
                    sp:arg1 [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 "E" ;
                      ] ;
                    sp:arg2 [
                        a sp:eq ;
                        sp:arg1 [
                            a fn:string-length ;
                            sp:arg1 [
                                sp:varName "elem" ;
                              ] ;
                          ] ;
                        sp:arg2 1 ;
                      ] ;
                  ] ;
                sp:arg2 "1" ;
                sp:arg3 [
                    a sp:if ;
                    sp:arg1 [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 "E" ;
                      ] ;
                    sp:arg2 [
                        a fn:substring ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 2 ;
                      ] ;
                    sp:arg3 "" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "epower" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:and ;
                    sp:arg1 [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 "L" ;
                      ] ;
                    sp:arg2 [
                        a sp:eq ;
                        sp:arg1 [
                            a fn:string-length ;
                            sp:arg1 [
                                sp:varName "elem" ;
                              ] ;
                          ] ;
                        sp:arg2 1 ;
                      ] ;
                  ] ;
                sp:arg2 "1" ;
                sp:arg3 [
                    a sp:if ;
                    sp:arg1 [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 "L" ;
                      ] ;
                    sp:arg2 [
                        a fn:substring ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 2 ;
                      ] ;
                    sp:arg3 "" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "lpower" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:and ;
                    sp:arg1 [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 "I" ;
                      ] ;
                    sp:arg2 [
                        a sp:eq ;
                        sp:arg1 [
                            a fn:string-length ;
                            sp:arg1 [
                                sp:varName "elem" ;
                              ] ;
                          ] ;
                        sp:arg2 1 ;
                      ] ;
                  ] ;
                sp:arg2 "1" ;
                sp:arg3 [
                    a sp:if ;
                    sp:arg1 [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 "I" ;
                      ] ;
                    sp:arg2 [
                        a fn:substring ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 2 ;
                      ] ;
                    sp:arg3 "" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "ipower" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:and ;
                    sp:arg1 [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 "M" ;
                      ] ;
                    sp:arg2 [
                        a sp:eq ;
                        sp:arg1 [
                            a fn:string-length ;
                            sp:arg1 [
                                sp:varName "elem" ;
                              ] ;
                          ] ;
                        sp:arg2 1 ;
                      ] ;
                  ] ;
                sp:arg2 "1" ;
                sp:arg3 [
                    a sp:if ;
                    sp:arg1 [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 "M" ;
                      ] ;
                    sp:arg2 [
                        a fn:substring ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 2 ;
                      ] ;
                    sp:arg3 "" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "mpower" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:and ;
                    sp:arg1 [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 "H" ;
                      ] ;
                    sp:arg2 [
                        a sp:eq ;
                        sp:arg1 [
                            a fn:string-length ;
                            sp:arg1 [
                                sp:varName "elem" ;
                              ] ;
                          ] ;
                        sp:arg2 1 ;
                      ] ;
                  ] ;
                sp:arg2 "1" ;
                sp:arg3 [
                    a sp:if ;
                    sp:arg1 [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 "H" ;
                      ] ;
                    sp:arg2 [
                        a fn:substring ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 2 ;
                      ] ;
                    sp:arg3 "" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "hpower" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:and ;
                    sp:arg1 [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 "T" ;
                      ] ;
                    sp:arg2 [
                        a sp:eq ;
                        sp:arg1 [
                            a fn:string-length ;
                            sp:arg1 [
                                sp:varName "elem" ;
                              ] ;
                          ] ;
                        sp:arg2 1 ;
                      ] ;
                  ] ;
                sp:arg2 "1" ;
                sp:arg3 [
                    a sp:if ;
                    sp:arg1 [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 "T" ;
                      ] ;
                    sp:arg2 [
                        a fn:substring ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 2 ;
                      ] ;
                    sp:arg3 "" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "tpower" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:and ;
                    sp:arg1 [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 "D" ;
                      ] ;
                    sp:arg2 [
                        a sp:eq ;
                        sp:arg1 [
                            a fn:string-length ;
                            sp:arg1 [
                                sp:varName "elem" ;
                              ] ;
                          ] ;
                        sp:arg2 1 ;
                      ] ;
                  ] ;
                sp:arg2 "1" ;
                sp:arg3 [
                    a sp:if ;
                    sp:arg1 [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 "D" ;
                      ] ;
                    sp:arg2 [
                        a fn:substring ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 2 ;
                      ] ;
                    sp:arg3 "" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "dpower" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a fn:concat ;
                sp:arg1 "A" ;
                sp:arg2 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:ne ;
                        sp:arg1 [
                            sp:varName "apower" ;
                          ] ;
                        sp:arg2 "" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "apower" ;
                      ] ;
                    sp:arg3 "0" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "aresult" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a fn:concat ;
                sp:arg1 "E" ;
                sp:arg2 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:ne ;
                        sp:arg1 [
                            sp:varName "epower" ;
                          ] ;
                        sp:arg2 "" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "epower" ;
                      ] ;
                    sp:arg3 "0" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "eresult" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a fn:concat ;
                sp:arg1 "L" ;
                sp:arg2 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:ne ;
                        sp:arg1 [
                            sp:varName "lpower" ;
                          ] ;
                        sp:arg2 "" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "lpower" ;
                      ] ;
                    sp:arg3 "0" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "lresult" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a fn:concat ;
                sp:arg1 "I" ;
                sp:arg2 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:ne ;
                        sp:arg1 [
                            sp:varName "ipower" ;
                          ] ;
                        sp:arg2 "" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "ipower" ;
                      ] ;
                    sp:arg3 "0" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "iresult" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a fn:concat ;
                sp:arg1 "M" ;
                sp:arg2 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:ne ;
                        sp:arg1 [
                            sp:varName "mpower" ;
                          ] ;
                        sp:arg2 "" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "mpower" ;
                      ] ;
                    sp:arg3 "0" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "mresult" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a fn:concat ;
                sp:arg1 "H" ;
                sp:arg2 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:ne ;
                        sp:arg1 [
                            sp:varName "hpower" ;
                          ] ;
                        sp:arg2 "" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "hpower" ;
                      ] ;
                    sp:arg3 "0" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "hresult" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a fn:concat ;
                sp:arg1 "T" ;
                sp:arg2 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:ne ;
                        sp:arg1 [
                            sp:varName "tpower" ;
                          ] ;
                        sp:arg2 "" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "tpower" ;
                      ] ;
                    sp:arg3 "0" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "tresult" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a fn:concat ;
                sp:arg1 "D" ;
                sp:arg2 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:ne ;
                        sp:arg1 [
                            sp:varName "dpower" ;
                          ] ;
                        sp:arg2 "" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "dpower" ;
                      ] ;
                    sp:arg3 "0" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "dresult" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a fn:concat ;
                sp:arg1 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:ne ;
                        sp:arg1 [
                            sp:varName "aresult" ;
                          ] ;
                        sp:arg2 "A0" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "aresult" ;
                      ] ;
                    sp:arg3 "" ;
                  ] ;
                sp:arg2 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:ne ;
                        sp:arg1 [
                            sp:varName "eresult" ;
                          ] ;
                        sp:arg2 "E0" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "eresult" ;
                      ] ;
                    sp:arg3 "" ;
                  ] ;
                sp:arg3 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:ne ;
                        sp:arg1 [
                            sp:varName "lresult" ;
                          ] ;
                        sp:arg2 "L0" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "lresult" ;
                      ] ;
                    sp:arg3 "" ;
                  ] ;
                sp:arg4 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:ne ;
                        sp:arg1 [
                            sp:varName "iresult" ;
                          ] ;
                        sp:arg2 "I0" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "iresult" ;
                      ] ;
                    sp:arg3 "" ;
                  ] ;
                sp:arg5 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:ne ;
                        sp:arg1 [
                            sp:varName "mresult" ;
                          ] ;
                        sp:arg2 "M0" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "mresult" ;
                      ] ;
                    sp:arg3 "" ;
                  ] ;
                sp:arg6 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:ne ;
                        sp:arg1 [
                            sp:varName "hresult" ;
                          ] ;
                        sp:arg2 "H0" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "hresult" ;
                      ] ;
                    sp:arg3 "" ;
                  ] ;
                sp:arg7 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:ne ;
                        sp:arg1 [
                            sp:varName "tresult" ;
                          ] ;
                        sp:arg2 "T0" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "tresult" ;
                      ] ;
                    sp:arg3 "" ;
                  ] ;
                sp:arg8 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:ne ;
                        sp:arg1 [
                            sp:varName "dresult" ;
                          ] ;
                        sp:arg2 "D0" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "dresult" ;
                      ] ;
                    sp:arg3 "" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
    ] ;
  rdfs:comment """Convert something like \"L-2 M T-2\" into \"L-2\" \"M1\" \"T-2\"

1. Split arg1 (which is the long string but without single exponents) into elements (?elem)
2. Pull out the power for each of the element types (A, E, L, I, M, H, T, and D), and locally bind as tpe power (?apower, ?epower, etc.)
3. Create element results by concatenating the element type (e.g., \"A\") with the right power (\"0\", \"1\", or power)
4. Aggregate the element results, but only if they have a representation, so there should be a single return for each elem

CALLED BY: newunits_spin:getAggregateDimension

REAL TEST:

SELECT ?comp
WHERE {
    ?arg1 a newUnits3:Export .
    BIND (newunits_spin:convertDimensions(?arg1) AS ?cresult) .
     ?itemresult newunits_spin:getDimensionComponentsProperty ?cresult .
}

FULL SPARQL TEST:

SELECT ?result
WHERE {
    ?arg1 a newUnits3:Export .
    ?unit newUnits3:primaryUnit ?IEC_UNIT .
    BIND (newunits_spin:convertDimensions(?arg1) AS ?result) .
    ?elem spif:split (?result \" \") .
    BIND (IF((fn:starts-with(?elem, \"A\") && (fn:string-length(?elem) = 1)), \"1\", IF(fn:starts-with(?elem, \"A\"), fn:substring(?elem, 2), \"\")) AS ?apower) .
    BIND (IF((fn:starts-with(?elem, \"E\") && (fn:string-length(?elem) = 1)), \"1\", IF(fn:starts-with(?elem, \"E\"), fn:substring(?elem, 2), \"\")) AS ?epower) .
    BIND (IF((fn:starts-with(?elem, \"L\") && (fn:string-length(?elem) = 1)), \"1\", IF(fn:starts-with(?elem, \"L\"), fn:substring(?elem, 2), \"\")) AS ?lpower) .
    BIND (IF((fn:starts-with(?elem, \"I\") && (fn:string-length(?elem) = 1)), \"1\", IF(fn:starts-with(?elem, \"I\"), fn:substring(?elem, 2), \"\")) AS ?ipower) .
    BIND (IF((fn:starts-with(?elem, \"M\") && (fn:string-length(?elem) = 1)), \"1\", IF(fn:starts-with(?elem, \"M\"), fn:substring(?elem, 2), \"\")) AS ?mpower) .
    BIND (IF((fn:starts-with(?elem, \"H\") && (fn:string-length(?elem) = 1)), \"1\", IF(fn:starts-with(?elem, \"H\"), fn:substring(?elem, 2), \"\")) AS ?hpower) .
    BIND (IF((fn:starts-with(?elem, \"T\") && (fn:string-length(?elem) = 1)), \"1\", IF(fn:starts-with(?elem, \"T\"), fn:substring(?elem, 2), \"\")) AS ?tpower) .
    BIND (IF((fn:starts-with(?elem, \"D\") && (fn:string-length(?elem) = 1)), \"1\", IF(fn:starts-with(?elem, \"D\"), fn:substring(?elem, 2), \"\")) AS ?dpower) .
    BIND (fn:concat(\"A\", IF((?apower != \"\"), ?apower, \"0\")) AS ?aresult) .
    BIND (fn:concat(\"E\", IF((?epower != \"\"), ?epower, \"0\")) AS ?eresult) .
    BIND (fn:concat(\"L\", IF((?lpower != \"\"), ?lpower, \"0\")) AS ?lresult) .
    BIND (fn:concat(\"I\", IF((?ipower != \"\"), ?ipower, \"0\")) AS ?iresult) .
    BIND (fn:concat(\"M\", IF((?mpower != \"\"), ?mpower, \"0\")) AS ?mresult) .
    BIND (fn:concat(\"H\", IF((?hpower != \"\"), ?hpower, \"0\")) AS ?hresult) .
    BIND (fn:concat(\"T\", IF((?tpower != \"\"), ?tpower, \"0\")) AS ?tresult) .
    BIND (fn:concat(\"D\", IF((?dpower != \"\"), ?dpower, \"0\")) AS ?dresult) .
    BIND (fn:concat(IF((?aresult != \"A0\"), ?aresult, \"\"),
                                    IF((?eresult != \"E0\"), ?eresult, \"\"),
                                        IF((?lresult != \"L0\"), ?lresult, \"\"),
                                            IF((?iresult != \"I0\"), ?iresult, \"\"),
                                                IF((?mresult != \"M0\"), ?mresult, \"\"),
                                                    IF((?hresult != \"H0\"), ?hresult, \"\"),
                                                        IF((?tresult != \"T0\"), ?tresult, \"\"),
                                                            IF((?dresult != \"D0\"), ?dresult, \"\")) AS ?result) .
}

Send the result into a function that will break the result up and rewrite the template based on the items in it""" ;
  rdfs:subClassOf spin:MagicProperties ;
.
newunits_spin:modifyDimensionTemplate
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression "M T-1" ;
            sp:variable spin:_arg1 ;
          ]
          [
            a sp:Bind ;
            sp:expression "A0 E0 L0 I0 M0 H0 T0 D0" ;
            sp:variable spin:_arg2 ;
          ]
          [
            sp:object [
                sp:varName "?0" ;
              ] ;
            sp:predicate spif:split ;
            sp:subject [
                sp:varName "elem" ;
              ] ;
          ]
          [
            sp:object spin:_arg1 ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?1" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object " " ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:and ;
                    sp:arg1 [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 "A" ;
                      ] ;
                    sp:arg2 [
                        a sp:eq ;
                        sp:arg1 [
                            a fn:string-length ;
                            sp:arg1 [
                                sp:varName "elem" ;
                              ] ;
                          ] ;
                        sp:arg2 1 ;
                      ] ;
                  ] ;
                sp:arg2 "1" ;
                sp:arg3 [
                    a sp:if ;
                    sp:arg1 [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 "A" ;
                      ] ;
                    sp:arg2 [
                        a fn:substring ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 2 ;
                      ] ;
                    sp:arg3 "" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "apower" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:and ;
                    sp:arg1 [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 "E" ;
                      ] ;
                    sp:arg2 [
                        a sp:eq ;
                        sp:arg1 [
                            a fn:string-length ;
                            sp:arg1 [
                                sp:varName "elem" ;
                              ] ;
                          ] ;
                        sp:arg2 1 ;
                      ] ;
                  ] ;
                sp:arg2 "1" ;
                sp:arg3 [
                    a sp:if ;
                    sp:arg1 [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 "E" ;
                      ] ;
                    sp:arg2 [
                        a fn:substring ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 2 ;
                      ] ;
                    sp:arg3 "" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "epower" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:and ;
                    sp:arg1 [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 "L" ;
                      ] ;
                    sp:arg2 [
                        a sp:eq ;
                        sp:arg1 [
                            a fn:string-length ;
                            sp:arg1 [
                                sp:varName "elem" ;
                              ] ;
                          ] ;
                        sp:arg2 1 ;
                      ] ;
                  ] ;
                sp:arg2 "1" ;
                sp:arg3 [
                    a sp:if ;
                    sp:arg1 [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 "L" ;
                      ] ;
                    sp:arg2 [
                        a fn:substring ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 2 ;
                      ] ;
                    sp:arg3 "" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "lpower" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:and ;
                    sp:arg1 [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 "I" ;
                      ] ;
                    sp:arg2 [
                        a sp:eq ;
                        sp:arg1 [
                            a fn:string-length ;
                            sp:arg1 [
                                sp:varName "elem" ;
                              ] ;
                          ] ;
                        sp:arg2 1 ;
                      ] ;
                  ] ;
                sp:arg2 "1" ;
                sp:arg3 [
                    a sp:if ;
                    sp:arg1 [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 "I" ;
                      ] ;
                    sp:arg2 [
                        a fn:substring ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 2 ;
                      ] ;
                    sp:arg3 "" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "ipower" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:and ;
                    sp:arg1 [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 "M" ;
                      ] ;
                    sp:arg2 [
                        a sp:eq ;
                        sp:arg1 [
                            a fn:string-length ;
                            sp:arg1 [
                                sp:varName "elem" ;
                              ] ;
                          ] ;
                        sp:arg2 1 ;
                      ] ;
                  ] ;
                sp:arg2 "1" ;
                sp:arg3 [
                    a sp:if ;
                    sp:arg1 [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 "M" ;
                      ] ;
                    sp:arg2 [
                        a fn:substring ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 2 ;
                      ] ;
                    sp:arg3 "" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "mpower" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:and ;
                    sp:arg1 [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 "H" ;
                      ] ;
                    sp:arg2 [
                        a sp:eq ;
                        sp:arg1 [
                            a fn:string-length ;
                            sp:arg1 [
                                sp:varName "elem" ;
                              ] ;
                          ] ;
                        sp:arg2 1 ;
                      ] ;
                  ] ;
                sp:arg2 "1" ;
                sp:arg3 [
                    a sp:if ;
                    sp:arg1 [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 "H" ;
                      ] ;
                    sp:arg2 [
                        a fn:substring ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 2 ;
                      ] ;
                    sp:arg3 "" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "hpower" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:and ;
                    sp:arg1 [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 "T" ;
                      ] ;
                    sp:arg2 [
                        a sp:eq ;
                        sp:arg1 [
                            a fn:string-length ;
                            sp:arg1 [
                                sp:varName "elem" ;
                              ] ;
                          ] ;
                        sp:arg2 1 ;
                      ] ;
                  ] ;
                sp:arg2 "1" ;
                sp:arg3 [
                    a sp:if ;
                    sp:arg1 [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 "T" ;
                      ] ;
                    sp:arg2 [
                        a fn:substring ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 2 ;
                      ] ;
                    sp:arg3 "" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "tpower" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:and ;
                    sp:arg1 [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 "D" ;
                      ] ;
                    sp:arg2 [
                        a sp:eq ;
                        sp:arg1 [
                            a fn:string-length ;
                            sp:arg1 [
                                sp:varName "elem" ;
                              ] ;
                          ] ;
                        sp:arg2 1 ;
                      ] ;
                  ] ;
                sp:arg2 "1" ;
                sp:arg3 [
                    a sp:if ;
                    sp:arg1 [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 "D" ;
                      ] ;
                    sp:arg2 [
                        a fn:substring ;
                        sp:arg1 [
                            sp:varName "elem" ;
                          ] ;
                        sp:arg2 2 ;
                      ] ;
                    sp:arg3 "" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "dpower" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spif:replaceAll ;
                sp:arg1 spin:_arg2 ;
                sp:arg2 "A0" ;
                sp:arg3 [
                    a fn:concat ;
                    sp:arg1 "A" ;
                    sp:arg2 [
                        a sp:if ;
                        sp:arg1 [
                            a sp:ne ;
                            sp:arg1 [
                                sp:varName "apower" ;
                              ] ;
                            sp:arg2 "" ;
                          ] ;
                        sp:arg2 [
                            sp:varName "apower" ;
                          ] ;
                        sp:arg3 "0" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "aresult" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spif:replaceAll ;
                sp:arg1 [
                    sp:varName "aresult" ;
                  ] ;
                sp:arg2 "E0" ;
                sp:arg3 [
                    a fn:concat ;
                    sp:arg1 "E" ;
                    sp:arg2 [
                        a sp:if ;
                        sp:arg1 [
                            a sp:ne ;
                            sp:arg1 [
                                sp:varName "epower" ;
                              ] ;
                            sp:arg2 "" ;
                          ] ;
                        sp:arg2 [
                            sp:varName "epower" ;
                          ] ;
                        sp:arg3 "0" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "eresult" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spif:replaceAll ;
                sp:arg1 [
                    sp:varName "eresult" ;
                  ] ;
                sp:arg2 "L0" ;
                sp:arg3 [
                    a fn:concat ;
                    sp:arg1 "L" ;
                    sp:arg2 [
                        a sp:if ;
                        sp:arg1 [
                            a sp:ne ;
                            sp:arg1 [
                                sp:varName "lpower" ;
                              ] ;
                            sp:arg2 "" ;
                          ] ;
                        sp:arg2 [
                            sp:varName "lpower" ;
                          ] ;
                        sp:arg3 "0" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "lresult" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spif:replaceAll ;
                sp:arg1 [
                    sp:varName "lresult" ;
                  ] ;
                sp:arg2 "I0" ;
                sp:arg3 [
                    a fn:concat ;
                    sp:arg1 "I" ;
                    sp:arg2 [
                        a sp:if ;
                        sp:arg1 [
                            a sp:ne ;
                            sp:arg1 [
                                sp:varName "ipower" ;
                              ] ;
                            sp:arg2 "" ;
                          ] ;
                        sp:arg2 [
                            sp:varName "ipower" ;
                          ] ;
                        sp:arg3 "0" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "iresult" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spif:replaceAll ;
                sp:arg1 [
                    sp:varName "iresult" ;
                  ] ;
                sp:arg2 "M0" ;
                sp:arg3 [
                    a fn:concat ;
                    sp:arg1 "M" ;
                    sp:arg2 [
                        a sp:if ;
                        sp:arg1 [
                            a sp:ne ;
                            sp:arg1 [
                                sp:varName "mpower" ;
                              ] ;
                            sp:arg2 "" ;
                          ] ;
                        sp:arg2 [
                            sp:varName "mpower" ;
                          ] ;
                        sp:arg3 "0" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "mresult" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spif:replaceAll ;
                sp:arg1 [
                    sp:varName "mresult" ;
                  ] ;
                sp:arg2 "H0" ;
                sp:arg3 [
                    a fn:concat ;
                    sp:arg1 "H" ;
                    sp:arg2 [
                        a sp:if ;
                        sp:arg1 [
                            a sp:ne ;
                            sp:arg1 [
                                sp:varName "hpower" ;
                              ] ;
                            sp:arg2 "" ;
                          ] ;
                        sp:arg2 [
                            sp:varName "hpower" ;
                          ] ;
                        sp:arg3 "0" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "hresult" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spif:replaceAll ;
                sp:arg1 [
                    sp:varName "hresult" ;
                  ] ;
                sp:arg2 "T0" ;
                sp:arg3 [
                    a fn:concat ;
                    sp:arg1 "T" ;
                    sp:arg2 [
                        a sp:if ;
                        sp:arg1 [
                            a sp:ne ;
                            sp:arg1 [
                                sp:varName "tpower" ;
                              ] ;
                            sp:arg2 "" ;
                          ] ;
                        sp:arg2 [
                            sp:varName "tpower" ;
                          ] ;
                        sp:arg3 "0" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "tresult" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spif:replaceAll ;
                sp:arg1 [
                    sp:varName "tresult" ;
                  ] ;
                sp:arg2 "D0" ;
                sp:arg3 [
                    a fn:concat ;
                    sp:arg1 "D" ;
                    sp:arg2 [
                        a sp:if ;
                        sp:arg1 [
                            a sp:ne ;
                            sp:arg1 [
                                sp:varName "dpower" ;
                              ] ;
                            sp:arg2 "" ;
                          ] ;
                        sp:arg2 [
                            sp:varName "dpower" ;
                          ] ;
                        sp:arg3 "0" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
    ] ;
  rdfs:comment """Convert something like m2 s-1 into L T-1

1. Convert LC to UC
2. Match and replace types (add one at a time)
    a. Aggregate like terms (e.g., K and K-1)
    b. Sum exponents (e.g., 1 -1 = 0) -> K0 D1
    c. S -> T, KG -> M, M -> L, A -> E, CD -> I, SR -> L, MOL -> A, K -> H, RAD -> L,
3. Remove spaces (easy)

SELECT ?IEC_UNIT ?result
WHERE {
    BIND (\"A0 E0 L0 I0 M0 H0 T0 D0\" AS ?dimTemplate) .
    ?arg1 a newUnits3:Export .
    ?unit newUnits3:primaryUnit ?IEC_UNIT .
    BIND (fn:upper-case(?IEC_UNIT) AS ?IEC_UC_UNIT) .
    ?elem spif:split (?IEC_UC_UNIT \" \") .
    BIND (spif:replaceAll(
                   spif:replaceAll(
                       spif:replaceAll(
                           spif:replaceAll(
                               spif:replaceAll(
                                   spif:replaceAll(
                                       spif:replaceAll(
                                           spif:replaceAll(
                                               spif:replaceAll(?IEC_UC_UNIT, \"MOL\", \"A\"),
                                                \"M\", \"L\"),
                                           \"A\", \"E\"),
                                       \"CD\", \"I\"),
                                   \"KG\", \"M\"),
                               \"K\", \"T\"),
                           \"S\", \"T\"),
                       \"SR\", \"\"),
                   \"RAD\", \"\")    AS ?result) .
}

Send the result into a function that will break the result up and rewrite the template based on the items in it""" ;
  rdfs:subClassOf spin:Functions ;
.
newunits_spin:notInQUDT
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            sp:object spin:_arg2 ;
            sp:predicate spif:foreach ;
            sp:subject [
                sp:varName "item" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:eq ;
                    sp:arg1 spin:_arg1 ;
                    sp:arg2 [
                        sp:varName "item" ;
                      ] ;
                  ] ;
                sp:arg2 false ;
                sp:arg3 true ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Takes an argument and a list and iterates over that list to compare the item with each item in the list. If the item and the list item are not equal then a TRUE is returned." ;
  rdfs:label "not in QUDT" ;
  rdfs:subClassOf spin:Functions ;
  skos:prefLabel "not in QUDT" ;
.
newunits_spin:replaceAllConversionsIntoDVTemplate
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "dresult" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a newunits_spin:replaceConversionInDVTemplate ;
                sp:arg1 spin:_arg1 ;
                sp:arg2 "A" ;
                sp:arg3 "A0" ;
                sp:arg4 spin:_arg2 ;
              ] ;
            sp:variable [
                sp:varName "aresult" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a newunits_spin:replaceConversionInDVTemplate ;
                sp:arg1 spin:_arg1 ;
                sp:arg2 "E" ;
                sp:arg3 "E0" ;
                sp:arg4 [
                    sp:varName "aresult" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "eresult" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a newunits_spin:replaceConversionInDVTemplate ;
                sp:arg1 spin:_arg1 ;
                sp:arg2 "L" ;
                sp:arg3 "L0" ;
                sp:arg4 [
                    sp:varName "eresult" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "lresult" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a newunits_spin:replaceConversionInDVTemplate ;
                sp:arg1 spin:_arg1 ;
                sp:arg2 "I" ;
                sp:arg3 "I0" ;
                sp:arg4 [
                    sp:varName "lresult" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "iresult" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a newunits_spin:replaceConversionInDVTemplate ;
                sp:arg1 spin:_arg1 ;
                sp:arg2 "M" ;
                sp:arg3 "M0" ;
                sp:arg4 [
                    sp:varName "iresult" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "mresult" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a newunits_spin:replaceConversionInDVTemplate ;
                sp:arg1 spin:_arg1 ;
                sp:arg2 "H" ;
                sp:arg3 "H0" ;
                sp:arg4 [
                    sp:varName "mresult" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "hresult" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a newunits_spin:replaceConversionInDVTemplate ;
                sp:arg1 spin:_arg1 ;
                sp:arg2 "T" ;
                sp:arg3 "T0" ;
                sp:arg4 [
                    sp:varName "hresult" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "tresult" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a newunits_spin:replaceConversionInDVTemplate ;
                sp:arg1 spin:_arg1 ;
                sp:arg2 "D" ;
                sp:arg3 "D0" ;
                sp:arg4 [
                    sp:varName "tresult" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "dresult" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
    ] ;
  rdfs:comment """This function modifies a DImension Vector template by the contents of a unit converstion

TEST:

SELECT ?dvresult
WHERE {
    BIND (\"A0 E0 L0 I0 M0 H0 T0 D0\" AS ?template) .
    ?unit a newUnits3:Export .
    BIND (newunits_spin:convertDimensions(?unit) AS ?convresult) .
    BIND (newunits_spin:replaceAllConversionsIntoDVTemplate(?convresult, ?template) AS ?dvresult) .
}""" ;
  rdfs:subClassOf spin:Functions ;
.
newunits_spin:replaceConversionInDVTemplate
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "componentDVResult" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a spif:indexOf ;
                sp:arg1 spin:_arg1 ;
                sp:arg2 spin:_arg2 ;
              ] ;
            sp:variable [
                sp:varName "typeIndex" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a fn:substring ;
                sp:arg1 spin:_arg1 ;
                sp:arg2 [
                    a sp:add ;
                    sp:arg1 [
                        sp:varName "typeIndex" ;
                      ] ;
                    sp:arg2 2 ;
                  ] ;
                sp:arg3 1 ;
              ] ;
            sp:variable [
                sp:varName "typeNext" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a fn:substring ;
                sp:arg1 spin:_arg1 ;
                sp:arg2 [
                    a sp:add ;
                    sp:arg1 [
                        sp:varName "typeIndex" ;
                      ] ;
                    sp:arg2 2 ;
                  ] ;
                sp:arg3 2 ;
              ] ;
            sp:variable [
                sp:varName "typePower" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a fn:concat ;
                sp:arg1 spin:_arg2 ;
                sp:arg2 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:or ;
                        sp:arg1 [
                            a sp:eq ;
                            sp:arg1 [
                                sp:varName "typeNext" ;
                              ] ;
                            sp:arg2 " " ;
                          ] ;
                        sp:arg2 [
                            a sp:eq ;
                            sp:arg1 [
                                sp:varName "typeNext" ;
                              ] ;
                            sp:arg2 "" ;
                          ] ;
                      ] ;
                    sp:arg2 1 ;
                    sp:arg3 [
                        a sp:if ;
                        sp:arg1 [
                            a sp:eq ;
                            sp:arg1 [
                                sp:varName "typeNext" ;
                              ] ;
                            sp:arg2 "-" ;
                          ] ;
                        sp:arg2 [
                            sp:varName "typePower" ;
                          ] ;
                        sp:arg3 [
                            sp:varName "typeNext" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "typeDVComponent" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 [
                        sp:varName "typeIndex" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a spif:replaceAll ;
                    sp:arg1 spin:_arg4 ;
                    sp:arg2 spin:_arg3 ;
                    sp:arg3 [
                        sp:varName "typeDVComponent" ;
                      ] ;
                  ] ;
                sp:arg3 spin:_arg4 ;
              ] ;
            sp:variable [
                sp:varName "componentDVResult" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType xsd:string ;
      rdfs:comment "The DV template component, such as \"A0\"" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg4 ;
      spl:valueType xsd:string ;
      rdfs:comment "The DV template (or current modification of it)" ;
    ] ;
  rdfs:comment """Given a converted unit string (e.g., \"L M T-1\",
          a type (e.g., \"L\"),
          a template component (e.g., \"L0\"), and
          a template (e.g., \"A0 E0 L0 I0 M0 H0 T0 D0\")
Return the template modified for each term int he unit string (in this example: \"A0 E0 L1 I0 M1 H0 T-1 D0\"

TEST:

SELECT ?aresult
WHERE {
    BIND (\"A0 E0 L0 I0 M0 H0 T0 D0\" AS ?template) .
    ?unit a newUnits3:Export .
    BIND (newunits_spin:convertDimensions(?unit) AS ?convresult) .
    BIND (newunits_spin:replaceConversionInDVTemplate(?convresult, \"A\", \"A0\", ?template) AS ?aresult) .
}""" ;
  rdfs:subClassOf spin:Functions ;
.
newunits_spin:unitDimensions
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          spin:_arg1
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "unitDims" ;
              ] ;
            sp:predicate newUnits3:primaryUnit ;
            sp:subject spin:_arg1 ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a newunits_spin:convertDimensions ;
                sp:arg1 [
                    sp:varName "unitDims" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "unitDIMS" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:comment """Convert primaryUnit value into a dimension vector as follows:

    M, CentiM, KiloM, etc. -> L
    GM, KiloGM, etc. -> M
    SEC, HR, YR, et. -> T


TEST MAGIC PROPERTY:

SELECT ?unit
WHERE {
    ?arg1 a newUnits3:Export .
    ?arg1 newUnits3:primaryUnit ?unitDims .
    ?unit newunits_spin:unitDimensions ?unitDims .
}


SELECT ?unit ?unitDims ?dimv
WHERE {
    ?arg1 a newUnits3:Export .
    ?arg1 newUnits3:primaryUnit ?unitDims .
    ?dimv newunits_spin:unitDimensions ?unitDims .
}


TEST FULL SPARQL:

SELECT DISTINCT ?arg1
WHERE {
    ?arg1 a newUnits3:Export .
    ?unitCls (rdfs:subClassOf)* qudt:Unit .
    ?unit a ?unitCls .
    ?unit qudt:iec61360Code ?qudt_iec .
    ?unit qudt:uneceCommonCode ?qudt_unece .
    ?arg1 newUnits3:code ?IEC_CODE .
    ?arg1 newUnits3:remark.EN ?UNECE .
    BIND (fn:substring(?UNECE, 14) AS ?UNECE_CODE) .
    BIND (IF ((?qudt_iec = ?IEC_CODE) || (?qudt_unece = ?UNECE_CODE), false, true) AS ?result) .
    FILTER (?result = true) .
}
""" ;
  rdfs:label "unit dimensions" ;
  rdfs:subClassOf spin:MagicProperties ;
  skos:prefLabel "unit dimensions" ;
.
newunits_spin:unitInQUDT
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          [
            sp:varName "item" ;
          ]
        ) ;
      sp:where (
          [
            a sp:TriplePath ;
            sp:object qudt:Unit ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath rdfs:subClassOf ;
              ] ;
            sp:subject [
                sp:varName "unitCls" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "unitCls" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "unit" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "qudt_iec" ;
              ] ;
            sp:predicate qudt:iec61360Code ;
            sp:subject [
                sp:varName "unit" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "qudt_unece" ;
              ] ;
            sp:predicate qudt:uneceCommonCode ;
            sp:subject [
                sp:varName "unit" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "IEC_CODE" ;
              ] ;
            sp:predicate newUnits3:code ;
            sp:subject spin:_arg1 ;
          ]
          [
            sp:object [
                sp:varName "UNECE" ;
              ] ;
            sp:predicate <http://qudt-public-repo/submissions/newUnits3/remark.EN> ;
            sp:subject spin:_arg1 ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a fn:substring ;
                sp:arg1 [
                    sp:varName "UNECE" ;
                  ] ;
                sp:arg2 14 ;
              ] ;
            sp:variable [
                sp:varName "UNECE_CODE" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:or ;
                sp:arg1 [
                    a sp:eq ;
                    sp:arg1 [
                        sp:varName "qudt_iec" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "IEC_CODE" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:eq ;
                    sp:arg1 [
                        sp:varName "qudt_unece" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "UNECE_CODE" ;
                      ] ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:comment """An element is in QUDT if either it has an IEC 61360 code that is the same or has an UN/ECE code that is the same.

Test call from newUnits.ttl:

SELECT ?inList ?IEC_CODE ?UNECE
WHERE {
    ?item a newUnits3:Export .
    ?item newUnits3:unitInQUDT ?inList .
    ?inList newUnits3:code ?IEC_CODE .
    ?inList newUnits3:remark.EN ?UNECE .
}

Here is a test with the body of the magic property:

SELECT DISTINCT ?arg1 ?IEC_CODE ?UNECE_CODE
WHERE {
    ?item a newUnits3:Export .
    BIND (?item AS ?arg1) .
    ?unitCls (rdfs:subClassOf)* qudt:Unit .
    ?unit a ?unitCls .
    ?unit qudt:iec61360Code ?qudt_iec .
    ?unit qudt:uneceCommonCode ?qudt_unece .
    ?arg1 newUnits3:code ?IEC_CODE .
    ?arg1 newUnits3:remark.EN ?UNECE .
    BIND (fn:substring(?UNECE, 14) AS ?UNECE_CODE) .
    FILTER ((?qudt_iec = ?IEC_CODE) || (?qudt_unece = ?UNECE_CODE)) .
}""" ;
  rdfs:label "unit in QUDT" ;
  rdfs:subClassOf spin:MagicProperties ;
  skos:prefLabel "unit in QUDT" ;
.
newunits_spin:unitNotInQUDT
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          spin:_arg1
        ) ;
      sp:where (
          [
            a sp:TriplePath ;
            sp:object qudt:Unit ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath rdfs:subClassOf ;
              ] ;
            sp:subject [
                sp:varName "unitCls" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "unitCls" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "unit" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "qudt_iec" ;
              ] ;
            sp:predicate qudt:iec61360Code ;
            sp:subject [
                sp:varName "unit" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "qudt_unece" ;
              ] ;
            sp:predicate qudt:uneceCommonCode ;
            sp:subject [
                sp:varName "unit" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "IEC_CODE" ;
              ] ;
            sp:predicate newUnits3:code ;
            sp:subject spin:_arg1 ;
          ]
          [
            sp:object [
                sp:varName "UNECE" ;
              ] ;
            sp:predicate <http://qudt-public-repo/submissions/newUnits3/remark.EN> ;
            sp:subject spin:_arg1 ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a fn:substring ;
                sp:arg1 [
                    sp:varName "UNECE" ;
                  ] ;
                sp:arg2 14 ;
              ] ;
            sp:variable [
                sp:varName "UNECE_CODE" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:or ;
                    sp:arg1 [
                        a sp:eq ;
                        sp:arg1 [
                            sp:varName "qudt_iec" ;
                          ] ;
                        sp:arg2 [
                            sp:varName "IEC_CODE" ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        a sp:eq ;
                        sp:arg1 [
                            sp:varName "qudt_unece" ;
                          ] ;
                        sp:arg2 [
                            sp:varName "UNECE_CODE" ;
                          ] ;
                      ] ;
                  ] ;
                sp:arg2 false ;
                sp:arg3 true ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:eq ;
                sp:arg1 [
                    sp:varName "result" ;
                  ] ;
                sp:arg2 true ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:comment """Test to see if a unit item is NOT in the QUDT vocabulary. If not return the item.


TEST MAGIC PROPERTY:

SELECT ?unit
WHERE {
    ?arg1 a newUnits3:Export .
    ?unit newunits_spin:unitNotInQUDT ?arg1 .
}


SELECT ?unit ?IEC_CODE ?UNECE_CODE ?iecLabel
WHERE {
    ?arg1 a newUnits3:Export .
    ?unit newunits_spin:unitNotInQUDT ?arg1 .
    ?unit newUnits3:code ?IEC_CODE .
    ?unit newUnits3:remark.EN ?UNECE .
    BIND (fn:substring(?UNECE, 14) AS ?UNECE_CODE) .
    ?arg1 newUnits3:unitText ?iecLabel .
}


TEST FULL SPARQL:

SELECT DISTINCT ?arg1
WHERE {
    ?arg1 a newUnits3:Export .
    ?unitCls (rdfs:subClassOf)* qudt:Unit .
    ?unit a ?unitCls .
    ?unit qudt:iec61360Code ?qudt_iec .
    ?unit qudt:uneceCommonCode ?qudt_unece .
    ?arg1 newUnits3:code ?IEC_CODE .
    ?arg1 newUnits3:remark.EN ?UNECE .
    BIND (fn:substring(?UNECE, 14) AS ?UNECE_CODE) .
    BIND (IF ((?qudt_iec = ?IEC_CODE) || (?qudt_unece = ?UNECE_CODE), false, true) AS ?result) .
    FILTER (?result = true) .
}
""" ;
  rdfs:label "unit not in QUDT" ;
  rdfs:subClassOf spin:MagicProperties ;
  skos:prefLabel "unit not in QUDT" ;
.
